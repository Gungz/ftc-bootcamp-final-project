{
  "address": "0xedec0330eC333af87a52121F28573aaa34610299",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "creator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "creatorSpace",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "membershipPrice",
          "type": "uint256"
        }
      ],
      "name": "CreatorSpaceCreated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allCreatorSpaces",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "nftName",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "nftSymbol",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "description",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "membershipPrice",
          "type": "uint256"
        }
      ],
      "name": "createCreatorSpace",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "creatorToSpaces",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllCreatorSpaces",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "creator",
          "type": "address"
        }
      ],
      "name": "getCreatorSpaces",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalCreatorSpaces",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isCreatorSpace",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x77bbd6e8c9a229f3b0541e2c7a4a0951e5c897ccdda7e9ae83fe8800cdef96b2",
  "receipt": {
    "to": null,
    "from": "0xeaE5807d0f58DE3E089FE1bcbD4dD5b7F4FF2919",
    "contractAddress": "0xedec0330eC333af87a52121F28573aaa34610299",
    "transactionIndex": 0,
    "gasUsed": "5351757",
    "logsBloom": "0x
    "blockHash": "0x67d302e31f91ae37a14ff5a18fb477f8a90ab084c462e2850a2f77bca3909c82",
    "transactionHash": "0x77bbd6e8c9a229f3b0541e2c7a4a0951e5c897ccdda7e9ae83fe8800cdef96b2",
    "logs": [],
    "blockNumber": 167251132,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "11d6615e37eee5912d847b6fb6e023e5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creatorSpace\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"membershipPrice\",\"type\":\"uint256\"}],\"name\":\"CreatorSpaceCreated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allCreatorSpaces\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"nftName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"nftSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"membershipPrice\",\"type\":\"uint256\"}],\"name\":\"createCreatorSpace\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"creatorToSpaces\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllCreatorSpaces\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"getCreatorSpaces\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalCreatorSpaces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isCreatorSpace\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CreatorPlatform.sol\":\"CreatorPlatform\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"./IERC1155.sol\\\";\\nimport {IERC1155Receiver} from \\\"./IERC1155Receiver.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"./extensions/IERC1155MetadataURI.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {Arrays} from \\\"../../utils/Arrays.sol\\\";\\nimport {IERC1155Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n */\\nabstract contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI, IERC1155Errors {\\n    using Arrays for uint256[];\\n    using Arrays for address[];\\n\\n    mapping(uint256 id => mapping(address account => uint256)) private _balances;\\n\\n    mapping(address account => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n    string private _uri;\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    constructor(string memory uri_) {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256 /* id */) public view virtual returns (string memory) {\\n        return _uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\\n        return _balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual returns (uint256[] memory) {\\n        if (accounts.length != ids.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, accounts.length);\\n        }\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts.unsafeMemoryAccess(i), ids.unsafeMemoryAccess(i));\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeTransferFrom(from, to, id, value, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeBatchTransferFrom(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`. Will mint (or burn) if `from`\\n     * (or `to`) is the zero address.\\n     *\\n     * Emits a {TransferSingle} event if the arrays contain one element, and {TransferBatch} otherwise.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement either {IERC1155Receiver-onERC1155Received}\\n     *   or {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     *\\n     * NOTE: The ERC-1155 acceptance check is not performed in this function. See {_updateWithAcceptanceCheck} instead.\\n     */\\n    function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual {\\n        if (ids.length != values.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, values.length);\\n        }\\n\\n        address operator = _msgSender();\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids.unsafeMemoryAccess(i);\\n            uint256 value = values.unsafeMemoryAccess(i);\\n\\n            if (from != address(0)) {\\n                uint256 fromBalance = _balances[id][from];\\n                if (fromBalance < value) {\\n                    revert ERC1155InsufficientBalance(from, fromBalance, value, id);\\n                }\\n                unchecked {\\n                    // Overflow not possible: value <= fromBalance\\n                    _balances[id][from] = fromBalance - value;\\n                }\\n            }\\n\\n            if (to != address(0)) {\\n                _balances[id][to] += value;\\n            }\\n        }\\n\\n        if (ids.length == 1) {\\n            uint256 id = ids.unsafeMemoryAccess(0);\\n            uint256 value = values.unsafeMemoryAccess(0);\\n            emit TransferSingle(operator, from, to, id, value);\\n        } else {\\n            emit TransferBatch(operator, from, to, ids, values);\\n        }\\n    }\\n\\n    /**\\n     * @dev Version of {_update} that performs the token acceptance check by calling\\n     * {IERC1155Receiver-onERC1155Received} or {IERC1155Receiver-onERC1155BatchReceived} on the receiver address if it\\n     * contains code (eg. is a smart contract at the moment of execution).\\n     *\\n     * IMPORTANT: Overriding this function is discouraged because it poses a reentrancy risk from the receiver. So any\\n     * update to the contract state after this function would break the check-effect-interaction pattern. Consider\\n     * overriding {_update} instead.\\n     */\\n    function _updateWithAcceptanceCheck(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal virtual {\\n        _update(from, to, ids, values);\\n        if (to != address(0)) {\\n            address operator = _msgSender();\\n            if (ids.length == 1) {\\n                uint256 id = ids.unsafeMemoryAccess(0);\\n                uint256 value = values.unsafeMemoryAccess(0);\\n                _doSafeTransferAcceptanceCheck(operator, from, to, id, value, data);\\n            } else {\\n                _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, values, data);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the values in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        _uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens of type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens of type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory values) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the zero address.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC1155InvalidOperator(address(0));\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Performs an acceptance check by calling {IERC1155-onERC1155Received} on the `to` address\\n     * if it contains code at the moment of execution.\\n     */\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes memory data\\n    ) private {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    // Tokens rejected\\n                    revert ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-ERC1155Receiver implementer\\n                    revert ERC1155InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a batch acceptance check by calling {IERC1155-onERC1155BatchReceived} on the `to` address\\n     * if it contains code at the moment of execution.\\n     */\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) private {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    // Tokens rejected\\n                    revert ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-ERC1155Receiver implementer\\n                    revert ERC1155InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Creates an array in memory with only one value for each of the elements provided.\\n     */\\n    function _asSingletonArrays(\\n        uint256 element1,\\n        uint256 element2\\n    ) private pure returns (uint256[] memory array1, uint256[] memory array2) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Load the free memory pointer\\n            array1 := mload(0x40)\\n            // Set array length to 1\\n            mstore(array1, 1)\\n            // Store the single element at the next word after the length (where content starts)\\n            mstore(add(array1, 0x20), element1)\\n\\n            // Repeat for next array locating it right after the first array\\n            array2 := add(array1, 0x40)\\n            mstore(array2, 1)\\n            mstore(add(array2, 0x20), element2)\\n\\n            // Update the free memory pointer by pointing after the second array\\n            mstore(0x40, add(array2, 0x40))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd9b0b8ee1ac6dfee14eb1ad4383a4739dbaa0f2036594bb3a16f0408085dadde\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6caffc9cfdc623eca9f87a686071708af5d5c17454d65022843fdddbc53c0cce\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe92b5e199b963d108ad6e06feeede151ba23849e0d064956535489ff967ffe68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Arrays.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\nimport {Math} from \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    using StorageSlot for bytes32;\\n\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getAddressSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getBytes32Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getUint256Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8806d620b6571932b662cfd48fbd518d4f70df1f88a23b5724cacde64a77bda1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    constructor() {\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if (_status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xf980daa263b661ab8ddee7d4fd833c7da7e7995e2c359ff1f17e67e4112f2236\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/CreatorPlatform.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./CreatorSpace.sol\\\";\\n\\ncontract CreatorPlatform {\\n    address[] public allCreatorSpaces;\\n    mapping(address => address[]) public creatorToSpaces;\\n    mapping(address => bool) public isCreatorSpace;\\n    \\n    event CreatorSpaceCreated(\\n        address indexed creator,\\n        address indexed creatorSpace,\\n        string name,\\n        uint256 membershipPrice\\n    );\\n    \\n    function createCreatorSpace(\\n        string memory nftName,\\n        string memory nftSymbol,\\n        string memory description,\\n        uint256 membershipPrice\\n    ) external returns (address) {\\n        CreatorSpace newSpace = new CreatorSpace(\\n            msg.sender,\\n            nftName,\\n            nftSymbol,\\n            description,\\n            membershipPrice\\n        );\\n        \\n        address spaceAddress = address(newSpace);\\n        allCreatorSpaces.push(spaceAddress);\\n        creatorToSpaces[msg.sender].push(spaceAddress);\\n        isCreatorSpace[spaceAddress] = true;\\n        \\n        emit CreatorSpaceCreated(msg.sender, spaceAddress, nftName, membershipPrice);\\n        return spaceAddress;\\n    }\\n    \\n    function getCreatorSpaces(address creator) external view returns (address[] memory) {\\n        return creatorToSpaces[creator];\\n    }\\n    \\n    function getAllCreatorSpaces() external view returns (address[] memory) {\\n        return allCreatorSpaces;\\n    }\\n    \\n    function getTotalCreatorSpaces() external view returns (uint256) {\\n        return allCreatorSpaces.length;\\n    }\\n}\\n\",\"keccak256\":\"0xf49cdcb43c7e996043a2d4bed6868f20605b9d8e7fb2bbad08a051e66c7514ea\",\"license\":\"MIT\"},\"contracts/CreatorSpace.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./MembershipNFT.sol\\\";\\nimport \\\"./ExclusiveContent.sol\\\";\\nimport \\\"./CrowdfundingCampaign.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ncontract CreatorSpace is ReentrancyGuard {\\n    address public creator;\\n    MembershipNFT public membershipNFT;\\n    ExclusiveContent public exclusiveContent;\\n    CrowdfundingCampaign public crowdfunding;\\n    \\n    uint256 public totalLikes;\\n    string public description;\\n    mapping(address => uint256) public userLikes;\\n    mapping(address => uint256) public tipReceived;\\n    \\n    struct Poll {\\n        string question;\\n        string[] options;\\n        mapping(uint256 => uint256) votes;\\n        mapping(address => bool) hasVoted;\\n        uint256 deadline;\\n        bool active;\\n    }\\n    \\n    uint256 private _pollIdCounter;\\n    mapping(uint256 => Poll) public polls;\\n    \\n    event Tipped(address indexed tipper, uint256 amount, string message);\\n    event Liked(address indexed liker, uint256 totalLikes);\\n    event PollCreated(uint256 indexed pollId, string question, uint256 deadline);\\n    event Voted(uint256 indexed pollId, address indexed voter, uint256 optionIndex);\\n    \\n    modifier onlyCreator() {\\n        require(msg.sender == creator, \\\"Not creator\\\");\\n        _;\\n    }\\n    \\n    modifier onlyMember() {\\n        require(membershipNFT.isMember(msg.sender), \\\"Not a member\\\");\\n        _;\\n    }\\n    \\n    constructor(\\n        address _creator,\\n        string memory nftName,\\n        string memory nftSymbol,\\n        string memory _description,\\n        uint256 membershipPrice\\n    ) {\\n        creator = _creator;\\n        description = _description;\\n        membershipNFT = new MembershipNFT(nftName, nftSymbol, membershipPrice, _creator);\\n        exclusiveContent = new ExclusiveContent(_creator);\\n        crowdfunding = new CrowdfundingCampaign(_creator);\\n    }\\n    \\n    function tip(string memory message) external payable onlyMember nonReentrant {\\n        require(msg.value > 0, \\\"Must send ETH\\\");\\n        \\n        tipReceived[msg.sender] += msg.value;\\n        payable(creator).transfer(msg.value);\\n        \\n        emit Tipped(msg.sender, msg.value, message);\\n    }\\n    \\n    function like() external onlyMember {\\n        userLikes[msg.sender]++;\\n        totalLikes++;\\n        \\n        emit Liked(msg.sender, totalLikes);\\n    }\\n    \\n    function createPoll(\\n        string memory question,\\n        string[] memory options,\\n        uint256 duration\\n    ) external onlyCreator returns (uint256) {\\n        require(options.length >= 2, \\\"Need at least 2 options\\\");\\n        \\n        uint256 pollId = _pollIdCounter++;\\n        Poll storage poll = polls[pollId];\\n        poll.question = question;\\n        poll.options = options;\\n        poll.deadline = block.timestamp + duration;\\n        poll.active = true;\\n        \\n        emit PollCreated(pollId, question, block.timestamp + duration);\\n        return pollId;\\n    }\\n    \\n    function vote(uint256 pollId, uint256 optionIndex) external onlyMember {\\n        Poll storage poll = polls[pollId];\\n        require(poll.active, \\\"Poll not active\\\");\\n        require(block.timestamp < poll.deadline, \\\"Poll ended\\\");\\n        require(!poll.hasVoted[msg.sender], \\\"Already voted\\\");\\n        require(optionIndex < poll.options.length, \\\"Invalid option\\\");\\n        \\n        poll.votes[optionIndex]++;\\n        poll.hasVoted[msg.sender] = true;\\n        \\n        emit Voted(pollId, msg.sender, optionIndex);\\n    }\\n    \\n    function closePoll(uint256 pollId) external onlyCreator {\\n        polls[pollId].active = false;\\n    }\\n    \\n    function getPollResults(uint256 pollId) external view returns (uint256[] memory) {\\n        Poll storage poll = polls[pollId];\\n        uint256[] memory results = new uint256[](poll.options.length);\\n        \\n        for (uint256 i = 0; i < poll.options.length; i++) {\\n            results[i] = poll.votes[i];\\n        }\\n        \\n        return results;\\n    }\\n    \\n    function getPollOptions(uint256 pollId) external view returns (string[] memory) {\\n        return polls[pollId].options;\\n    }\\n}\\n\",\"keccak256\":\"0xe1d41a9c7c2c7f1d87723117019cf6a2ccf4564795743fcbae974e744cc87a0d\",\"license\":\"MIT\"},\"contracts/CrowdfundingCampaign.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/ReentrancyGuard.sol\\\";\\n\\ncontract CrowdfundingCampaign is Ownable, ReentrancyGuard {\\n    enum CampaignType { ALL_OR_NOTHING, KEEP_WHAT_YOU_RAISE }\\n    enum CampaignStatus { ACTIVE, SUCCESS, FAILED, WITHDRAWN }\\n    \\n    struct Campaign {\\n        uint256 goal;\\n        uint256 deadline;\\n        uint256 raised;\\n        CampaignType campaignType;\\n        CampaignStatus status;\\n    }\\n    \\n    uint256 private _campaignIdCounter;\\n    mapping(uint256 => Campaign) public campaigns;\\n    mapping(uint256 => mapping(address => uint256)) public contributions;\\n    \\n    event CampaignCreated(uint256 indexed campaignId, uint256 goal, uint256 deadline, CampaignType campaignType);\\n    event ContributionMade(uint256 indexed campaignId, address indexed contributor, uint256 amount);\\n    event CampaignFinalized(uint256 indexed campaignId, CampaignStatus status, uint256 totalRaised);\\n    event Refunded(uint256 indexed campaignId, address indexed contributor, uint256 amount);\\n    event FundsWithdrawn(uint256 indexed campaignId, uint256 amount);\\n    \\n    constructor(address creator) Ownable(creator) {}\\n    \\n    function createCampaign(\\n        uint256 goal,\\n        uint256 duration,\\n        CampaignType campaignType\\n    ) external onlyOwner returns (uint256) {\\n        uint256 campaignId = _campaignIdCounter++;\\n        \\n        campaigns[campaignId] = Campaign({\\n            goal: goal,\\n            deadline: block.timestamp + duration,\\n            raised: 0,\\n            campaignType: campaignType,\\n            status: CampaignStatus.ACTIVE\\n        });\\n        \\n        emit CampaignCreated(campaignId, goal, block.timestamp + duration, campaignType);\\n        return campaignId;\\n    }\\n    \\n    function contribute(uint256 campaignId) external payable {\\n        Campaign storage campaign = campaigns[campaignId];\\n        require(campaign.status == CampaignStatus.ACTIVE, \\\"Campaign not active\\\");\\n        require(block.timestamp < campaign.deadline, \\\"Campaign ended\\\");\\n        require(msg.value > 0, \\\"Must contribute something\\\");\\n        \\n        contributions[campaignId][msg.sender] += msg.value;\\n        campaign.raised += msg.value;\\n        \\n        emit ContributionMade(campaignId, msg.sender, msg.value);\\n    }\\n    \\n    function finalizeCampaign(uint256 campaignId) external {\\n        Campaign storage campaign = campaigns[campaignId];\\n        require(campaign.status == CampaignStatus.ACTIVE, \\\"Campaign not active\\\");\\n        require(block.timestamp >= campaign.deadline, \\\"Campaign still ongoing\\\");\\n        \\n        if (campaign.raised >= campaign.goal) {\\n            campaign.status = CampaignStatus.SUCCESS;\\n        } else {\\n            campaign.status = campaign.campaignType == CampaignType.ALL_OR_NOTHING \\n                ? CampaignStatus.FAILED \\n                : CampaignStatus.SUCCESS;\\n        }\\n        \\n        emit CampaignFinalized(campaignId, campaign.status, campaign.raised);\\n    }\\n    \\n    function withdrawFunds(uint256 campaignId) external onlyOwner nonReentrant {\\n        Campaign storage campaign = campaigns[campaignId];\\n        require(campaign.status == CampaignStatus.SUCCESS, \\\"Campaign not successful\\\");\\n        \\n        uint256 amount = campaign.raised;\\n        campaign.raised = 0;\\n        campaign.status = CampaignStatus.WITHDRAWN;\\n        \\n        payable(owner()).transfer(amount);\\n        emit FundsWithdrawn(campaignId, amount);\\n    }\\n    \\n    function refund(uint256 campaignId) external nonReentrant {\\n        Campaign storage campaign = campaigns[campaignId];\\n        require(campaign.status == CampaignStatus.FAILED, \\\"Refunds not available\\\");\\n        \\n        uint256 contribution = contributions[campaignId][msg.sender];\\n        require(contribution > 0, \\\"No contribution to refund\\\");\\n        \\n        contributions[campaignId][msg.sender] = 0;\\n        campaign.raised -= contribution;\\n        \\n        payable(msg.sender).transfer(contribution);\\n        emit Refunded(campaignId, msg.sender, contribution);\\n    }\\n}\\n\",\"keccak256\":\"0xfb2d3b36727870640be57145099894432d36158c8f710001e18d73f3a7f77a36\",\"license\":\"MIT\"},\"contracts/ExclusiveContent.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract ExclusiveContent is ERC1155, Ownable {\\n    uint256 private _contentIdCounter;\\n    \\n    struct ContentItem {\\n        uint256 price;\\n        uint256 maxSupply;\\n        uint256 currentSupply;\\n        string uri;\\n    }\\n    \\n    mapping(uint256 => ContentItem) public contentItems;\\n    \\n    event ContentCreated(uint256 indexed contentId, uint256 price, uint256 maxSupply, string uri);\\n    event ContentMinted(uint256 indexed contentId, address indexed minter, uint256 amount);\\n    \\n    constructor(address creator) ERC1155(\\\"\\\") Ownable(creator) {}\\n    \\n    function createContent(\\n        uint256 price,\\n        uint256 maxSupply,\\n        string memory contentUri\\n    ) external onlyOwner returns (uint256) {\\n        uint256 contentId = _contentIdCounter++;\\n        \\n        contentItems[contentId] = ContentItem({\\n            price: price,\\n            maxSupply: maxSupply,\\n            currentSupply: 0,\\n            uri: contentUri\\n        });\\n        \\n        emit ContentCreated(contentId, price, maxSupply, contentUri);\\n        return contentId;\\n    }\\n    \\n    function mintContent(uint256 contentId, uint256 amount) external payable {\\n        ContentItem storage item = contentItems[contentId];\\n        require(item.maxSupply > 0, \\\"Content does not exist\\\");\\n        require(item.currentSupply + amount <= item.maxSupply, \\\"Exceeds max supply\\\");\\n        require(msg.value >= item.price * amount, \\\"Insufficient payment\\\");\\n        \\n        item.currentSupply += amount;\\n        _mint(msg.sender, contentId, amount, \\\"\\\");\\n        \\n        if (msg.value > item.price * amount) {\\n            payable(msg.sender).transfer(msg.value - (item.price * amount));\\n        }\\n        \\n        emit ContentMinted(contentId, msg.sender, amount);\\n    }\\n    \\n    function uri(uint256 contentId) public view override returns (string memory) {\\n        return contentItems[contentId].uri;\\n    }\\n    \\n    function withdraw() external onlyOwner {\\n        payable(owner()).transfer(address(this).balance);\\n    }\\n    \\n    function getContentCount() external view returns (uint256) {\\n        return _contentIdCounter;\\n    }\\n}\\n\",\"keccak256\":\"0xd9f5e7388cd6a2c36ea00ff957766e82788c9d1527e39ef0c7baf19af7e8299f\",\"license\":\"MIT\"},\"contracts/MembershipNFT.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract MembershipNFT is ERC721, Ownable {\\n    uint256 private _tokenIdCounter;\\n    uint256 public membershipPrice;\\n    uint256 public totalMembers;\\n    \\n    event MembershipMinted(address indexed member, uint256 tokenId);\\n    event PriceUpdated(uint256 newPrice);\\n    \\n    constructor(\\n        string memory name,\\n        string memory symbol,\\n        uint256 _membershipPrice,\\n        address creator\\n    ) ERC721(name, symbol) Ownable(creator) {\\n        membershipPrice = _membershipPrice;\\n    }\\n    \\n    function mintMembership() external payable {\\n        require(msg.value >= membershipPrice, \\\"Insufficient payment\\\");\\n        \\n        uint256 tokenId = _tokenIdCounter++;\\n        _safeMint(msg.sender, tokenId);\\n        totalMembers++;\\n        \\n        if (msg.value > membershipPrice) {\\n            payable(msg.sender).transfer(msg.value - membershipPrice);\\n        }\\n        \\n        emit MembershipMinted(msg.sender, tokenId);\\n    }\\n    \\n    function setMembershipPrice(uint256 _newPrice) external onlyOwner {\\n        membershipPrice = _newPrice;\\n        emit PriceUpdated(_newPrice);\\n    }\\n    \\n    function withdraw() external onlyOwner {\\n        payable(owner()).transfer(address(this).balance);\\n    }\\n    \\n    function isMember(address account) external view returns (bool) {\\n        return balanceOf(account) > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xc0bcc3f59244cf21d6764887c6a9a5fd38450120d265aa2b6e418169e025a689\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50615fe4806100206000396000f3fe60806040523480156200001157600080fd5b5060043610620000765760003560e01c80633ff85905146200007b5780634cb98dc014620000b657806352856ef114620000cf57806380aaf88414620000e6578063cccc210b1462000116578063f5194ed4146200012d578063fcc72630146200013f575b600080fd5b620000a16200008c366004620003db565b60026020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b620000c062000156565b604051620000ad919062000400565b620000c0620000e0366004620003db565b620001ba565b620000fd620000f73660046200044f565b62000232565b6040516001600160a01b039091168152602001620000ad565b620000fd6200012736600462000469565b6200025d565b600054604051908152602001620000ad565b620000fd6200015036600462000540565b62000296565b60606000805480602002602001604051908101604052809291908181526020018280548015620001b057602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000191575b5050505050905090565b6001600160a01b0381166000908152600160209081526040918290208054835181840281018401909452808452606093928301828280156200022657602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000207575b50505050509050919050565b600081815481106200024357600080fd5b6000918252602090912001546001600160a01b0316905081565b600160205281600052604060002081815481106200027a57600080fd5b6000918252602090912001546001600160a01b03169150829050565b6000803386868686604051620002ac90620003b0565b620002bc95949392919062000621565b604051809103906000f080158015620002d9573d6000803e3d6000fd5b5060008054600181810183557f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56390910180546001600160a01b0385166001600160a01b0319918216811790925533808552602084815260408087208054808801825590885282882001805490941685179093558386526002905293819020805460ff1916909317909255905192935083929091907f2d9ca7e782e7cae97e1c6281d9c2356407414ad4128da126fb128b8bbdc54cb3906200039e908b90899062000684565b60405180910390a39695505050505050565b61590680620006a983390190565b80356001600160a01b0381168114620003d657600080fd5b919050565b600060208284031215620003ee57600080fd5b620003f982620003be565b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015620004435783516001600160a01b0316835292840192918401916001016200041c565b50909695505050505050565b6000602082840312156200046257600080fd5b5035919050565b600080604083850312156200047d57600080fd5b6200048883620003be565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620004be57600080fd5b81356001600160401b0380821115620004db57620004db62000496565b604051601f8301601f19908116603f0116810190828211818310171562000506576200050662000496565b816040528381528660208588010111156200052057600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080608085870312156200055757600080fd5b84356001600160401b03808211156200056f57600080fd5b6200057d88838901620004ac565b955060208701359150808211156200059457600080fd5b620005a288838901620004ac565b94506040870135915080821115620005b957600080fd5b50620005c887828801620004ac565b949793965093946060013593505050565b6000815180845260005b818110156200060157602081850181015186830182015201620005e3565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b038616815260a0602082018190526000906200064790830187620005d9565b82810360408401526200065b8187620005d9565b90508281036060840152620006718186620005d9565b9150508260808301529695505050505050565b604081526000620006996040830185620005d9565b9050826020830152939250505056fe60806040523480156200001157600080fd5b506040516200590638038062005906833981016040819052620000349162000281565b6001600081905580546001600160a01b0319166001600160a01b0387161790556006620000628382620003cc565b508383828760405162000075906200018a565b620000849493929190620004c6565b604051809103906000f080158015620000a1573d6000803e3d6000fd5b50600280546001600160a01b0319166001600160a01b03929092169190911790556040518590620000d29062000198565b6001600160a01b039091168152602001604051809103906000f080158015620000ff573d6000803e3d6000fd5b50600380546001600160a01b0319166001600160a01b039290921691909117905560405185906200013090620001a6565b6001600160a01b039091168152602001604051809103906000f0801580156200015d573d6000803e3d6000fd5b50600480546001600160a01b0319166001600160a01b039290921691909117905550620005119350505050565b61179c806200182f83390190565b611c208062002fcb83390190565b610d1b8062004beb83390190565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620001e7578181015183820152602001620001cd565b50506000910152565b600082601f8301126200020257600080fd5b81516001600160401b03808211156200021f576200021f620001b4565b604051601f8301601f19908116603f011681019082821181831017156200024a576200024a620001b4565b816040528381528660208588010111156200026457600080fd5b62000277846020830160208901620001ca565b9695505050505050565b600080600080600060a086880312156200029a57600080fd5b85516001600160a01b0381168114620002b257600080fd5b60208701519095506001600160401b0380821115620002d057600080fd5b620002de89838a01620001f0565b95506040880151915080821115620002f557600080fd5b6200030389838a01620001f0565b945060608801519150808211156200031a57600080fd5b506200032988828901620001f0565b925050608086015190509295509295909350565b600181811c908216806200035257607f821691505b6020821081036200037357634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003c757600081815260208120601f850160051c81016020861015620003a25750805b601f850160051c820191505b81811015620003c357828155600101620003ae565b5050505b505050565b81516001600160401b03811115620003e857620003e8620001b4565b6200040081620003f984546200033d565b8462000379565b602080601f8311600181146200043857600084156200041f5750858301515b600019600386901b1c1916600185901b178555620003c3565b600085815260208120601f198616915b82811015620004695788860151825594840194600190910190840162000448565b5085821015620004885787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008151808452620004b2816020860160208601620001ca565b601f01601f19169290920160200192915050565b608081526000620004db608083018762000498565b8281036020840152620004ef818762000498565b604084019590955250506001600160a01b039190911660609091015292915050565b61130e80620005216000396000f3fe6080604052600436106100c35760003560e01c806302d05d3f146100c85780630f90d900146100fe57806333b4097b1461012257806356885cd81461014f5780637284e4161461016f5780639534e63714610191578063985d0b1e146101b3578063a523b88a146101d3578063ac2f0074146101e8578063b384abef14610217578063cb56393c14610237578063cf19b7c41461024a578063e8d5b22d1461026a578063f3c2b7f714610297578063f7562765146102c4578063f8c860f4146102f1575b600080fd5b3480156100d457600080fd5b506001546100e8906001600160a01b031681565b6040516100f59190610d03565b60405180910390f35b34801561010a57600080fd5b5061011460055481565b6040519081526020016100f5565b34801561012e57600080fd5b5061014261013d366004610d17565b610311565b6040516100f59190610d30565b34801561015b57600080fd5b506004546100e8906001600160a01b031681565b34801561017b57600080fd5b506101846103c4565b6040516100f59190610dba565b34801561019d57600080fd5b506101b16101ac366004610d17565b610452565b005b3480156101bf57600080fd5b506002546100e8906001600160a01b031681565b3480156101df57600080fd5b506101b16104a0565b3480156101f457600080fd5b50610208610203366004610d17565b61059c565b6040516100f593929190610dd4565b34801561022357600080fd5b506101b1610232366004610dfe565b61064a565b6101b1610245366004610ed5565b61087f565b34801561025657600080fd5b506003546100e8906001600160a01b031681565b34801561027657600080fd5b50610114610285366004610f11565b60076020526000908152604090205481565b3480156102a357600080fd5b506101146102b2366004610f11565b60086020526000908152604090205481565b3480156102d057600080fd5b506102e46102df366004610d17565b610a02565b6040516100f59190610f3a565b3480156102fd57600080fd5b5061011461030c366004610f9c565b610af1565b6000818152600a602052604081206001810154606092906001600160401b0381111561033f5761033f610e20565b604051908082528060200260200182016040528015610368578160200160208202803683370190505b50905060005b60018301548110156103bc576000818152600284016020526040902054825183908390811061039f5761039f61108a565b6020908102919091010152806103b4816110b6565b91505061036e565b509392505050565b600680546103d1906110cf565b80601f01602080910402602001604051908101604052809291908181526020018280546103fd906110cf565b801561044a5780601f1061041f5761010080835404028352916020019161044a565b820191906000526020600020905b81548152906001019060200180831161042d57829003601f168201915b505050505081565b6001546001600160a01b031633146104855760405162461bcd60e51b815260040161047c90611109565b60405180910390fd5b6000908152600a60205260409020600501805460ff19169055565b60025460405163288c314960e21b81526001600160a01b039091169063a230c524906104d0903390600401610d03565b602060405180830381865afa1580156104ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610511919061112e565b61052d5760405162461bcd60e51b815260040161047c90611150565b336000908152600760205260408120805491610548836110b6565b90915550506005805490600061055d836110b6565b909155505060055460405190815233907f3e0a236119aa7dbac5cfd31309977ad6f3c7f39721b4a28205e1386fef72499a9060200160405180910390a2565b600a602052600090815260409020805481906105b7906110cf565b80601f01602080910402602001604051908101604052809291908181526020018280546105e3906110cf565b80156106305780601f1061060557610100808354040283529160200191610630565b820191906000526020600020905b81548152906001019060200180831161061357829003601f168201915b50505050600483015460059093015491929160ff16905083565b60025460405163288c314960e21b81526001600160a01b039091169063a230c5249061067a903390600401610d03565b602060405180830381865afa158015610697573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bb919061112e565b6106d75760405162461bcd60e51b815260040161047c90611150565b6000828152600a60205260409020600581015460ff1661072b5760405162461bcd60e51b815260206004820152600f60248201526e506f6c6c206e6f742061637469766560881b604482015260640161047c565b8060040154421061076b5760405162461bcd60e51b815260206004820152600a602482015269141bdb1b08195b99195960b21b604482015260640161047c565b33600090815260038201602052604090205460ff16156107bd5760405162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e481d9bdd1959609a1b604482015260640161047c565b600181015482106108015760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21037b83a34b7b760911b604482015260640161047c565b6000828152600282016020526040812080549161081d836110b6565b909155505033600081815260038301602052604090819020805460ff191660011790555184907f1abe610cf2bf87e57dcc1181fcf5ac0934e843d8344ab9eed6e86c799f62585e906108729086815260200190565b60405180910390a3505050565b60025460405163288c314960e21b81526001600160a01b039091169063a230c524906108af903390600401610d03565b602060405180830381865afa1580156108cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f0919061112e565b61090c5760405162461bcd60e51b815260040161047c90611150565b610914610c1c565b600034116109545760405162461bcd60e51b815260206004820152600d60248201526c09aeae6e840e6cadcc8408aa89609b1b604482015260640161047c565b3360009081526008602052604081208054349290610973908490611176565b90915550506001546040516001600160a01b03909116903480156108fc02916000818181858888f193505050501580156109b1573d6000803e3d6000fd5b50336001600160a01b03167f4f629a5f1c8e7fc616770a8d34896b447f3457037c40a23347478746309d73c234836040516109ed92919061118f565b60405180910390a26109ff6001600055565b50565b6060600a6000838152602001908152602001600020600101805480602002602001604051908101604052809291908181526020016000905b82821015610ae6578382906000526020600020018054610a59906110cf565b80601f0160208091040260200160405190810160405280929190818152602001828054610a85906110cf565b8015610ad25780601f10610aa757610100808354040283529160200191610ad2565b820191906000526020600020905b815481529060010190602001808311610ab557829003601f168201915b505050505081526020019060010190610a3a565b505050509050919050565b6001546000906001600160a01b03163314610b1e5760405162461bcd60e51b815260040161047c90611109565b600283511015610b6a5760405162461bcd60e51b81526020600482015260176024820152764e656564206174206c656173742032206f7074696f6e7360481b604482015260640161047c565b6009805460009182610b7b836110b6565b909155506000818152600a6020526040902090915080610b9b87826111f7565b508451610bb19060018301906020880190610c46565b50610bbc8442611176565b600482015560058101805460ff19166001179055817fc3ad3dd4f77bea708d7c21b918efa79c536b30c5048924662db7a2bd96f4831687610bfd8742611176565b604051610c0b9291906112b6565b60405180910390a250949350505050565b600260005403610c3f57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b828054828255906000526020600020908101928215610c8c579160200282015b82811115610c8c5782518290610c7c90826111f7565b5091602001919060010190610c66565b50610c98929150610c9c565b5090565b80821115610c98576000610cb08282610cb9565b50600101610c9c565b508054610cc5906110cf565b6000825580601f10610cd5575050565b601f0160209004906000526020600020908101906109ff91905b80821115610c985760008155600101610cef565b6001600160a01b0391909116815260200190565b600060208284031215610d2957600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015610d6857835183529284019291840191600101610d4c565b50909695505050505050565b6000815180845260005b81811015610d9a57602081850181015186830182015201610d7e565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610dcd6020830184610d74565b9392505050565b606081526000610de76060830186610d74565b602083019490945250901515604090910152919050565b60008060408385031215610e1157600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715610e5e57610e5e610e20565b604052919050565b600082601f830112610e7757600080fd5b81356001600160401b03811115610e9057610e90610e20565b610ea3601f8201601f1916602001610e36565b818152846020838601011115610eb857600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215610ee757600080fd5b81356001600160401b03811115610efd57600080fd5b610f0984828501610e66565b949350505050565b600060208284031215610f2357600080fd5b81356001600160a01b0381168114610dcd57600080fd5b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610f8f57603f19888603018452610f7d858351610d74565b94509285019290850190600101610f61565b5092979650505050505050565b600080600060608486031215610fb157600080fd5b83356001600160401b0380821115610fc857600080fd5b610fd487838801610e66565b9450602091508186013581811115610feb57600080fd5b8601601f81018813610ffc57600080fd5b80358281111561100e5761100e610e20565b8060051b61101d858201610e36565b918252828101850191858101908b84111561103757600080fd5b86850192505b83831015611073578235868111156110555760008081fd5b6110638d8983890101610e66565b835250918601919086019061103d565b989b989a5050505060409690960135955050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016110c8576110c86110a0565b5060010190565b600181811c908216806110e357607f821691505b60208210810361110357634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600b908201526a2737ba1031b932b0ba37b960a91b604082015260600190565b60006020828403121561114057600080fd5b81518015158114610dcd57600080fd5b6020808252600c908201526b2737ba10309036b2b6b132b960a11b604082015260600190565b80820180821115611189576111896110a0565b92915050565b828152604060208201526000610f096040830184610d74565b601f8211156111f257600081815260208120601f850160051c810160208610156111cf5750805b601f850160051c820191505b818110156111ee578281556001016111db565b5050505b505050565b81516001600160401b0381111561121057611210610e20565b6112248161121e84546110cf565b846111a8565b602080601f83116001811461125957600084156112415750858301515b600019600386901b1c1916600185901b1785556111ee565b600085815260208120601f198616915b8281101561128857888601518255948401946001909101908401611269565b50858210156112a65787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6040815260006112c96040830185610d74565b9050826020830152939250505056fea2646970667358221220bb6fd042d6545bdda96b616137810937da03be19525be53ade1e42d70939377e64736f6c6343000814003360806040523480156200001157600080fd5b506040516200179c3803806200179c8339810160408190526200003491620001b6565b8084846000620000458382620002da565b506001620000548282620002da565b5050506001600160a01b0381166200008657604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b62000091816200009f565b505060085550620003a69050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200011957600080fd5b81516001600160401b0380821115620001365762000136620000f1565b604051601f8301601f19908116603f01168101908282118183101715620001615762000161620000f1565b816040528381526020925086838588010111156200017e57600080fd5b600091505b83821015620001a2578582018301518183018401529082019062000183565b600093810190920192909252949350505050565b60008060008060808587031215620001cd57600080fd5b84516001600160401b0380821115620001e557600080fd5b620001f38883890162000107565b955060208701519150808211156200020a57600080fd5b50620002198782880162000107565b60408701516060880151919550935090506001600160a01b03811681146200024057600080fd5b939692955090935050565b600181811c908216806200026057607f821691505b6020821081036200028157634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002d557600081815260208120601f850160051c81016020861015620002b05750805b601f850160051c820191505b81811015620002d157828155600101620002bc565b5050505b505050565b81516001600160401b03811115620002f657620002f6620000f1565b6200030e816200030784546200024b565b8462000287565b602080601f8311600181146200034657600084156200032d5750858301515b600019600386901b1c1916600185901b178555620002d1565b600085815260208120601f198616915b82811015620003775788860151825594840194600190910190840162000356565b5085821015620003965787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6113e680620003b66000396000f3fe6080604052600436106101055760003560e01c806301ffc9a71461010a57806306fdde031461013f578063081812fc14610161578063095ea7b31461018e5780630de3226b146101b057806323b872dd146101d45780633ccfd60b146101f457806342842e0e146102095780636352211e1461022957806369d5f38a1461024957806370a08231146102695780637123190814610289578063715018a61461029157806376e92559146102a65780638da5cb5b146102bc57806395d89b41146102d1578063a22cb465146102e6578063a230c52414610306578063b88d4fde14610326578063c87b56dd14610346578063e985e9c514610366578063f2fde38b14610386575b600080fd5b34801561011657600080fd5b5061012a610125366004611001565b6103a6565b60405190151581526020015b60405180910390f35b34801561014b57600080fd5b506101546103f8565b604051610136919061106e565b34801561016d57600080fd5b5061018161017c366004611081565b61048a565b604051610136919061109a565b34801561019a57600080fd5b506101ae6101a93660046110ca565b61049f565b005b3480156101bc57600080fd5b506101c660085481565b604051908152602001610136565b3480156101e057600080fd5b506101ae6101ef3660046110f4565b6104ae565b34801561020057600080fd5b506101ae610542565b34801561021557600080fd5b506101ae6102243660046110f4565b61058d565b34801561023557600080fd5b50610181610244366004611081565b6105ad565b34801561025557600080fd5b506101ae610264366004611081565b6105b8565b34801561027557600080fd5b506101c6610284366004611130565b6105fb565b6101ae610643565b34801561029d57600080fd5b506101ae610741565b3480156102b257600080fd5b506101c660095481565b3480156102c857600080fd5b50610181610755565b3480156102dd57600080fd5b50610154610764565b3480156102f257600080fd5b506101ae61030136600461114b565b610773565b34801561031257600080fd5b5061012a610321366004611130565b61077e565b34801561033257600080fd5b506101ae61034136600461119d565b610791565b34801561035257600080fd5b50610154610361366004611081565b6107a8565b34801561037257600080fd5b5061012a610381366004611278565b61081d565b34801561039257600080fd5b506101ae6103a1366004611130565b61084b565b60006001600160e01b031982166380ac58cd60e01b14806103d757506001600160e01b03198216635b5e139f60e01b145b806103f257506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060008054610407906112ab565b80601f0160208091040260200160405190810160405280929190818152602001828054610433906112ab565b80156104805780601f1061045557610100808354040283529160200191610480565b820191906000526020600020905b81548152906001019060200180831161046357829003601f168201915b5050505050905090565b600061049582610886565b506103f2826108be565b6104aa8282336108d9565b5050565b6001600160a01b0382166104e1576000604051633250574960e11b81526004016104d8919061109a565b60405180910390fd5b60006104ee8383336108e6565b9050836001600160a01b0316816001600160a01b03161461053c576040516364283d7b60e01b81526001600160a01b03808616600483015260248201849052821660448201526064016104d8565b50505050565b61054a6109da565b610552610755565b6001600160a01b03166108fc479081150290604051600060405180830381858888f1935050505015801561058a573d6000803e3d6000fd5b50565b6105a883838360405180602001604052806000815250610791565b505050565b60006103f282610886565b6105c06109da565b60088190556040518181527f66cbca4f3c64fecf1dcb9ce094abcf7f68c3450a1d4e3a8e917dd621edb4ebe09060200160405180910390a150565b60006001600160a01b0382166106275760006040516322718ad960e21b81526004016104d8919061109a565b506001600160a01b031660009081526003602052604090205490565b60085434101561068c5760405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b60448201526064016104d8565b600780546000918261069d836112fb565b9190505590506106ad3382610a0c565b600980549060006106bd836112fb565b91905055506008543411156107095760085433906108fc906106df9034611314565b6040518115909202916000818181858888f19350505050158015610707573d6000803e3d6000fd5b505b60405181815233907fbab4562ae868d1765ed8452e98bba908a974596c4babc3ada5e90e05e3f433fb9060200160405180910390a250565b6107496109da565b6107536000610a26565b565b6006546001600160a01b031690565b606060018054610407906112ab565b6104aa338383610a78565b60008061078a836105fb565b1192915050565b61079c8484846104ae565b61053c84848484610b0e565b60606107b382610886565b5060006107cb60408051602081019091526000815290565b905060008151116107eb5760405180602001604052806000815250610816565b806107f584610c25565b604051602001610806929190611327565b6040516020818303038152906040525b9392505050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6108536109da565b6001600160a01b03811661087d576000604051631e4fbdf760e01b81526004016104d8919061109a565b61058a81610a26565b60008061089283610cb7565b90506001600160a01b0381166103f257604051637e27328960e01b8152600481018490526024016104d8565b6000908152600460205260409020546001600160a01b031690565b6105a88383836001610cd2565b6000806108f284610cb7565b90506001600160a01b0383161561090e5761090e818486610dcf565b6001600160a01b0381161561094c5761092b600085600080610cd2565b6001600160a01b038116600090815260036020526040902080546000190190555b6001600160a01b0385161561097b576001600160a01b0385166000908152600360205260409020805460010190555b60008481526002602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b336109e3610755565b6001600160a01b031614610753573360405163118cdaa760e01b81526004016104d8919061109a565b6104aa828260405180602001604052806000815250610e33565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216610aa15781604051630b61174360e31b81526004016104d8919061109a565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383163b1561053c57604051630a85bd0160e11b81526001600160a01b0384169063150b7a0290610b50903390889087908790600401611356565b6020604051808303816000875af1925050508015610b8b575060408051601f3d908101601f19168201909252610b8891810190611393565b60015b610beb573d808015610bb9576040519150601f19603f3d011682016040523d82523d6000602084013e610bbe565b606091505b508051600003610be35783604051633250574960e11b81526004016104d8919061109a565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b14610c1e5783604051633250574960e11b81526004016104d8919061109a565b5050505050565b60606000610c3283610e4a565b60010190506000816001600160401b03811115610c5157610c51611187565b6040519080825280601f01601f191660200182016040528015610c7b576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610c8557509392505050565b6000908152600260205260409020546001600160a01b031690565b8080610ce657506001600160a01b03821615155b15610d9f576000610cf684610886565b90506001600160a01b03831615801590610d225750826001600160a01b0316816001600160a01b031614155b8015610d355750610d33818461081d565b155b15610d55578260405163a9fbf51f60e01b81526004016104d8919061109a565b8115610d9d5783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260046020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b610dda838383610f20565b6105a8576001600160a01b038316610e0857604051637e27328960e01b8152600481018290526024016104d8565b60405163177e802f60e01b81526001600160a01b0383166004820152602481018290526044016104d8565b610e3d8383610f86565b6105a86000848484610b0e565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310610e895772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6904ee2d6d415b85acef8160201b8310610eb3576904ee2d6d415b85acef8160201b830492506020015b662386f26fc100008310610ed157662386f26fc10000830492506010015b6305f5e1008310610ee9576305f5e100830492506008015b6127108310610efd57612710830492506004015b60648310610f0f576064830492506002015b600a83106103f25760010192915050565b60006001600160a01b03831615801590610f7e5750826001600160a01b0316846001600160a01b03161480610f5a5750610f5a848461081d565b80610f7e5750826001600160a01b0316610f73836108be565b6001600160a01b0316145b949350505050565b6001600160a01b038216610fb0576000604051633250574960e11b81526004016104d8919061109a565b6000610fbe838360006108e6565b90506001600160a01b038116156105a85760006040516339e3563760e11b81526004016104d8919061109a565b6001600160e01b03198116811461058a57600080fd5b60006020828403121561101357600080fd5b813561081681610feb565b60005b83811015611039578181015183820152602001611021565b50506000910152565b6000815180845261105a81602086016020860161101e565b601f01601f19169290920160200192915050565b6020815260006108166020830184611042565b60006020828403121561109357600080fd5b5035919050565b6001600160a01b0391909116815260200190565b80356001600160a01b03811681146110c557600080fd5b919050565b600080604083850312156110dd57600080fd5b6110e6836110ae565b946020939093013593505050565b60008060006060848603121561110957600080fd5b611112846110ae565b9250611120602085016110ae565b9150604084013590509250925092565b60006020828403121561114257600080fd5b610816826110ae565b6000806040838503121561115e57600080fd5b611167836110ae565b91506020830135801515811461117c57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156111b357600080fd5b6111bc856110ae565b93506111ca602086016110ae565b92506040850135915060608501356001600160401b03808211156111ed57600080fd5b818701915087601f83011261120157600080fd5b81358181111561121357611213611187565b604051601f8201601f19908116603f0116810190838211818310171561123b5761123b611187565b816040528281528a602084870101111561125457600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561128b57600080fd5b611294836110ae565b91506112a2602084016110ae565b90509250929050565b600181811c908216806112bf57607f821691505b6020821081036112df57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60006001820161130d5761130d6112e5565b5060010190565b818103818111156103f2576103f26112e5565b6000835161133981846020880161101e565b83519083019061134d81836020880161101e565b01949350505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061138990830184611042565b9695505050505050565b6000602082840312156113a557600080fd5b815161081681610feb56fea2646970667358221220e56b250bf5ff76f83ab6b1880bf9a9e1ac0f5a4b92a27807daa93d2fe08d755264736f6c6343000814003360806040523480156200001157600080fd5b5060405162001c2038038062001c208339810160408190526200003491620000f7565b6040805160208101909152600081528190620000508162000093565b506001600160a01b0381166200008057604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200008b81620000a5565b50506200029a565b6002620000a18282620001ce565b5050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000602082840312156200010a57600080fd5b81516001600160a01b03811681146200012257600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200015457607f821691505b6020821081036200017557634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001c957600081815260208120601f850160051c81016020861015620001a45750805b601f850160051c820191505b81811015620001c557828155600101620001b0565b5050505b505050565b81516001600160401b03811115620001ea57620001ea62000129565b6200020281620001fb84546200013f565b846200017b565b602080601f8311600181146200023a5760008415620002215750858301515b600019600386901b1c1916600185901b178555620001c5565b600085815260208120601f198616915b828110156200026b578886015182559484019460019091019084016200024a565b50858210156200028a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61197680620002aa6000396000f3fe6080604052600436106100c25760003560e01c8062fdd58e146100c757806301ffc9a7146100fa5780630e73afdf1461012a5780630e89341c1461015a5780632eb2c2d6146101875780633ccfd60b146101a95780634e1273f4146101be578063553cd765146101eb578063715018a6146101fe57806374449ca4146102135780638da5cb5b1461022857806390cd58191461024a578063a22cb4651461026a578063e985e9c51461028a578063f242432a146102aa578063f2fde38b146102ca575b600080fd5b3480156100d357600080fd5b506100e76100e23660046110c6565b6102ea565b6040519081526020015b60405180910390f35b34801561010657600080fd5b5061011a610115366004611106565b610312565b60405190151581526020016100f1565b34801561013657600080fd5b5061014a61014536600461112a565b610362565b6040516100f19493929190611189565b34801561016657600080fd5b5061017a61017536600461112a565b610415565b6040516100f191906111b8565b34801561019357600080fd5b506101a76101a2366004611316565b6104ba565b005b3480156101b557600080fd5b506101a761051b565b3480156101ca57600080fd5b506101de6101d93660046113bf565b610566565b6040516100f191906114b9565b6101a76101f93660046114cc565b610636565b34801561020a57600080fd5b506101a7610807565b34801561021f57600080fd5b506004546100e7565b34801561023457600080fd5b5061023d61081b565b6040516100f191906114ee565b34801561025657600080fd5b506100e7610265366004611502565b61082a565b34801561027657600080fd5b506101a7610285366004611565565b6108e6565b34801561029657600080fd5b5061011a6102a53660046115a1565b6108f5565b3480156102b657600080fd5b506101a76102c53660046115d4565b610923565b3480156102d657600080fd5b506101a76102e5366004611638565b610973565b6000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b148061034357506001600160e01b031982166303a24d0760e21b145b8061030c57506301ffc9a760e01b6001600160e01b031983161461030c565b60056020526000908152604090208054600182015460028301546003840180549394929391929161039290611653565b80601f01602080910402602001604051908101604052809291908181526020018280546103be90611653565b801561040b5780601f106103e05761010080835404028352916020019161040b565b820191906000526020600020905b8154815290600101906020018083116103ee57829003601f168201915b5050505050905084565b600081815260056020526040902060030180546060919061043590611653565b80601f016020809104026020016040519081016040528092919081815260200182805461046190611653565b80156104ae5780601f10610483576101008083540402835291602001916104ae565b820191906000526020600020905b81548152906001019060200180831161049157829003601f168201915b50505050509050919050565b336001600160a01b03861681148015906104db57506104d986826108f5565b155b1561050657808660405163711bec9160e11b81526004016104fd92919061168d565b60405180910390fd5b61051386868686866109ae565b505050505050565b610523610a15565b61052b61081b565b6001600160a01b03166108fc479081150290604051600060405180830381858888f19350505050158015610563573d6000803e3d6000fd5b50565b606081518351146105975781518351604051635b05999160e01b8152600481019290925260248201526044016104fd565b600083516001600160401b038111156105b2576105b26111cb565b6040519080825280602002602001820160405280156105db578160200160208202803683370190505b50905060005b845181101561062e576106016105f78683610a47565b6100e28684610a47565b828281518110610613576106136116a7565b6020908102919091010152610627816116d3565b90506105e1565b509392505050565b6000828152600560205260409020600181015461068e5760405162461bcd60e51b815260206004820152601660248201527510dbdb9d195b9d08191bd95cc81b9bdd08195e1a5cdd60521b60448201526064016104fd565b80600101548282600201546106a391906116ec565b11156106e65760405162461bcd60e51b815260206004820152601260248201527145786365656473206d617820737570706c7960701b60448201526064016104fd565b80546106f39083906116ff565b3410156107395760405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b60448201526064016104fd565b8181600201600082825461074d91906116ec565b9250508190555061076f33848460405180602001604052806000815250610a55565b805461077c9083906116ff565b3411156107ca57805433906108fc906107969085906116ff565b6107a09034611716565b6040518115909202916000818181858888f193505050501580156107c8573d6000803e3d6000fd5b505b604051828152339084907fc48688bb4f81faa9a189102a2f3a2ff9e3c217037cc67b6a2829672176940242906020015b60405180910390a3505050565b61080f610a15565b6108196000610a9e565b565b6003546001600160a01b031690565b6000610834610a15565b6004805460009182610845836116d3565b909155506040805160808101825287815260208082018881526000838501818152606085018a815287835260059094529490208351815590516001820155925160028401555192935091600382019061089e9082611774565b50905050807f5babc075e07d10206474b5fc21410d62a99e15b4c45f33656671be31fcc898368686866040516108d693929190611833565b60405180910390a2949350505050565b6108f1338383610af0565b5050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b336001600160a01b0386168114801590610944575061094286826108f5565b155b1561096657808660405163711bec9160e11b81526004016104fd92919061168d565b6105138686868686610b7e565b61097b610a15565b6001600160a01b0381166109a5576000604051631e4fbdf760e01b81526004016104fd91906114ee565b61056381610a9e565b6001600160a01b0384166109d8576000604051632bfa23e760e11b81526004016104fd91906114ee565b6001600160a01b038516610a01576000604051626a0d4560e21b81526004016104fd91906114ee565b610a0e8585858585610bf8565b5050505050565b33610a1e61081b565b6001600160a01b031614610819573360405163118cdaa760e01b81526004016104fd91906114ee565b602090810291909101015190565b6001600160a01b038416610a7f576000604051632bfa23e760e11b81526004016104fd91906114ee565b600080610a8c8585610c5d565b91509150610513600087848487610bf8565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216610b1957600060405162ced3e160e81b81526004016104fd91906114ee565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3191016107fa565b6001600160a01b038416610ba8576000604051632bfa23e760e11b81526004016104fd91906114ee565b6001600160a01b038516610bd1576000604051626a0d4560e21b81526004016104fd91906114ee565b600080610bde8585610c5d565b91509150610bef8787848487610bf8565b50505050505050565b610c0485858585610c85565b6001600160a01b03841615610a0e5782513390600103610c4f576000610c2a8582610a47565b90506000610c388582610a47565b9050610c48838989858589610eb8565b5050610513565b610513818787878787610fca565b6040805160018082526020820194909452808201938452606081019290925260808201905291565b8051825114610cb45781518151604051635b05999160e01b8152600481019290925260248201526044016104fd565b3360005b8351811015610dcd576000610ccd8583610a47565b90506000610cdb8584610a47565b90506001600160a01b03881615610d75576000828152602081815260408083206001600160a01b038c16845290915290205481811015610d4e576040516303dee4c560e01b81526001600160a01b038a1660048201526024810182905260448101839052606481018490526084016104fd565b6000838152602081815260408083206001600160a01b038d16845290915290209082900390555b6001600160a01b03871615610dba576000828152602081815260408083206001600160a01b038b16845290915281208054839290610db49084906116ec565b90915550505b505080610dc6906116d3565b9050610cb8565b508251600103610e5a576000610de38482610a47565b90506000610df18482610a47565b9050856001600160a01b0316876001600160a01b0316846001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628585604051610e4b929190918252602082015260400190565b60405180910390a45050610a0e565b836001600160a01b0316856001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051610ea992919061185b565b60405180910390a45050505050565b6001600160a01b0384163b156105135760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190610efc9089908990889088908890600401611880565b6020604051808303816000875af1925050508015610f37575060408051601f3d908101601f19168201909252610f34918101906118c5565b60015b610f97573d808015610f65576040519150601f19603f3d011682016040523d82523d6000602084013e610f6a565b606091505b508051600003610f8f5784604051632bfa23e760e11b81526004016104fd91906114ee565b805181602001fd5b6001600160e01b0319811663f23a6e6160e01b14610bef5784604051632bfa23e760e11b81526004016104fd91906114ee565b6001600160a01b0384163b156105135760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061100e90899089908890889088906004016118e2565b6020604051808303816000875af1925050508015611049575060408051601f3d908101601f19168201909252611046918101906118c5565b60015b611077573d808015610f65576040519150601f19603f3d011682016040523d82523d6000602084013e610f6a565b6001600160e01b0319811663bc197c8160e01b14610bef5784604051632bfa23e760e11b81526004016104fd91906114ee565b80356001600160a01b03811681146110c157600080fd5b919050565b600080604083850312156110d957600080fd5b6110e2836110aa565b946020939093013593505050565b6001600160e01b03198116811461056357600080fd5b60006020828403121561111857600080fd5b8135611123816110f0565b9392505050565b60006020828403121561113c57600080fd5b5035919050565b6000815180845260005b818110156111695760208185018101518683018201520161114d565b506000602082860101526020601f19601f83011685010191505092915050565b8481528360208201528260408201526080606082015260006111ae6080830184611143565b9695505050505050565b6020815260006111236020830184611143565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715611209576112096111cb565b604052919050565b60006001600160401b0382111561122a5761122a6111cb565b5060051b60200190565b600082601f83011261124557600080fd5b8135602061125a61125583611211565b6111e1565b82815260059290921b8401810191818101908684111561127957600080fd5b8286015b84811015611294578035835291830191830161127d565b509695505050505050565b60006001600160401b038311156112b8576112b86111cb565b6112cb601f8401601f19166020016111e1565b90508281528383830111156112df57600080fd5b828260208301376000602084830101529392505050565b600082601f83011261130757600080fd5b6111238383356020850161129f565b600080600080600060a0868803121561132e57600080fd5b611337866110aa565b9450611345602087016110aa565b935060408601356001600160401b038082111561136157600080fd5b61136d89838a01611234565b9450606088013591508082111561138357600080fd5b61138f89838a01611234565b935060808801359150808211156113a557600080fd5b506113b2888289016112f6565b9150509295509295909350565b600080604083850312156113d257600080fd5b82356001600160401b03808211156113e957600080fd5b818501915085601f8301126113fd57600080fd5b8135602061140d61125583611211565b82815260059290921b8401810191818101908984111561142c57600080fd5b948201945b8386101561145157611442866110aa565b82529482019490820190611431565b9650508601359250508082111561146757600080fd5b5061147485828601611234565b9150509250929050565b600081518084526020808501945080840160005b838110156114ae57815187529582019590820190600101611492565b509495945050505050565b602081526000611123602083018461147e565b600080604083850312156114df57600080fd5b50508035926020909101359150565b6001600160a01b0391909116815260200190565b60008060006060848603121561151757600080fd5b833592506020840135915060408401356001600160401b0381111561153b57600080fd5b8401601f8101861361154c57600080fd5b61155b8682356020840161129f565b9150509250925092565b6000806040838503121561157857600080fd5b611581836110aa565b91506020830135801515811461159657600080fd5b809150509250929050565b600080604083850312156115b457600080fd5b6115bd836110aa565b91506115cb602084016110aa565b90509250929050565b600080600080600060a086880312156115ec57600080fd5b6115f5866110aa565b9450611603602087016110aa565b9350604086013592506060860135915060808601356001600160401b0381111561162c57600080fd5b6113b2888289016112f6565b60006020828403121561164a57600080fd5b611123826110aa565b600181811c9082168061166757607f821691505b60208210810361168757634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160a01b0392831681529116602082015260400190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016116e5576116e56116bd565b5060010190565b8082018082111561030c5761030c6116bd565b808202811582820484141761030c5761030c6116bd565b8181038181111561030c5761030c6116bd565b601f82111561176f57600081815260208120601f850160051c810160208610156117505750805b601f850160051c820191505b818110156105135782815560010161175c565b505050565b81516001600160401b0381111561178d5761178d6111cb565b6117a18161179b8454611653565b84611729565b602080601f8311600181146117d657600084156117be5750858301515b600019600386901b1c1916600185901b178555610513565b600085815260208120601f198616915b82811015611805578886015182559484019460019091019084016117e6565b50858210156118235787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8381528260208201526060604082015260006118526060830184611143565b95945050505050565b60408152600061186e604083018561147e565b8281036020840152611852818561147e565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906118ba90830184611143565b979650505050505050565b6000602082840312156118d757600080fd5b8151611123816110f0565b6001600160a01b0386811682528516602082015260a06040820181905260009061190e9083018661147e565b8281036060840152611920818661147e565b905082810360808401526119348185611143565b9897505050505050505056fea2646970667358221220983a33c459d53c49ab0362a8078d79d97ec1f9a008881f5fd016db471dd7f23d64736f6c63430008140033608060405234801561001057600080fd5b50604051610d1b380380610d1b83398101604081905261002f916100c2565b806001600160a01b03811661005e57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61006781610072565b5050600180556100f2565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100d457600080fd5b81516001600160a01b03811681146100eb57600080fd5b9392505050565b610c1a806101016000396000f3fe6080604052600436106100815760003560e01c8063141961bc14610086578063155dd5ee146100f0578063278ecde1146101125780633d891f59146101325780636b5ca27d14610178578063715018a6146101985780638da5cb5b146101ad578063a31ec2d4146101cf578063c1cbbca7146101ef578063f2fde38b14610202575b600080fd5b34801561009257600080fd5b506100d66100a13660046109d7565b600360208190526000918252604090912080546001820154600283015492909301549092919060ff8082169161010090041685565b6040516100e7959493929190610a2a565b60405180910390f35b3480156100fc57600080fd5b5061011061010b3660046109d7565b610222565b005b34801561011e57600080fd5b5061011061012d3660046109d7565b610351565b34801561013e57600080fd5b5061016a61014d366004610a7f565b600460209081526000928352604080842090915290825290205481565b6040519081526020016100e7565b34801561018457600080fd5b506101106101933660046109d7565b6104d4565b3480156101a457600080fd5b50610110610635565b3480156101b957600080fd5b506101c2610649565b6040516100e79190610aab565b3480156101db57600080fd5b5061016a6101ea366004610abf565b610658565b6101106101fd3660046109d7565b610792565b34801561020e57600080fd5b5061011061021d366004610afc565b6108f0565b61022a61092b565b61023261095d565b60008181526003602052604090206001600382810154610100900460ff1690811115610260576102606109f0565b146102ac5760405162461bcd60e51b815260206004820152601760248201527610d85b5c185a59db881b9bdd081cdd58d8d95cdcd99d5b604a1b60448201526064015b60405180910390fd5b600281018054600090915560038201805461ff0019166103001790556102d0610649565b6001600160a01b03166108fc829081150290604051600060405180830381858888f19350505050158015610308573d6000803e3d6000fd5b50827fd66662c0ded9e58fd31d5e44944bcfd07ffc15e6927ecc1382e7941cb7bd24c48260405161033b91815260200190565b60405180910390a2505061034e60018055565b50565b61035961095d565b60008181526003602052604090206002600382810154610100900460ff1690811115610387576103876109f0565b146103cc5760405162461bcd60e51b8152602060048201526015602482015274526566756e6473206e6f7420617661696c61626c6560581b60448201526064016102a3565b60008281526004602090815260408083203384529091529020548061042f5760405162461bcd60e51b8152602060048201526019602482015278139bc818dbdb9d1c9a589d5d1a5bdb881d1bc81c99599d5b99603a1b60448201526064016102a3565b6000838152600460209081526040808320338452909152812081905560028301805483929061045f908490610b34565b9091555050604051339082156108fc029083906000818181858888f19350505050158015610491573d6000803e3d6000fd5b50604051818152339084907f7ca5472b7ea78c2c0141c5a12ee6d170cf4ce8ed06be3d22c8252ddfc7a6a2c49060200160405180910390a3505061034e60018055565b600081815260036020526040812090600382810154610100900460ff1690811115610501576105016109f0565b1461051e5760405162461bcd60e51b81526004016102a390610b4d565b806001015442101561056b5760405162461bcd60e51b815260206004820152601660248201527543616d706169676e207374696c6c206f6e676f696e6760501b60448201526064016102a3565b805460028201541061058d5760038101805461ff0019166101001790556105e2565b6000600382015460ff1660018111156105a8576105a86109f0565b146105b45760016105b7565b60025b8160030160016101000a81548160ff021916908360038111156105dc576105dc6109f0565b02179055505b817f242b7d43c73f615dfdfa4919702ad9db4880a3b095d19100eb73c3d05e92be158260030160019054906101000a900460ff168360020154604051610629929190610b7a565b60405180910390a25050565b61063d61092b565b6106476000610987565b565b6000546001600160a01b031690565b600061066261092b565b600280546000918261067383610b95565b9190505590506040518060a0016040528086815260200185426106969190610bae565b8152602001600081526020018460018111156106b4576106b46109f0565b8152602001600090526000828152600360208181526040928390208451815590840151600180830191909155928401516002820155606084015191810180549193909160ff191690838181111561070d5761070d6109f0565b021790555060808201518160030160016101000a81548160ff0219169083600381111561073c5761073c6109f0565b02179055508291507f773f71a4c22bd4be60ea1217b6a12317409936f776458fb130c6bdd9984741f29050866107728742610bae565b8660405161078293929190610bc1565b60405180910390a2949350505050565b600081815260036020526040812090600382810154610100900460ff16908111156107bf576107bf6109f0565b146107dc5760405162461bcd60e51b81526004016102a390610b4d565b806001015442106108205760405162461bcd60e51b815260206004820152600e60248201526d10d85b5c185a59db88195b99195960921b60448201526064016102a3565b6000341161086c5760405162461bcd60e51b81526020600482015260196024820152784d75737420636f6e7472696275746520736f6d657468696e6760381b60448201526064016102a3565b600082815260046020908152604080832033845290915281208054349290610895908490610bae565b92505081905550348160020160008282546108b09190610bae565b9091555050604051348152339083907f0a4a91237423e0a1766a761c7cb029311d8b95d6b1b81db1b949a70c98b4e08e9060200160405180910390a35050565b6108f861092b565b6001600160a01b038116610922576000604051631e4fbdf760e01b81526004016102a39190610aab565b61034e81610987565b33610934610649565b6001600160a01b031614610647573360405163118cdaa760e01b81526004016102a39190610aab565b60026001540361098057604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156109e957600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60028110610a1657610a166109f0565b9052565b60048110610a1657610a166109f0565b858152602081018590526040810184905260a08101610a4c6060830185610a06565b610a596080830184610a1a565b9695505050505050565b80356001600160a01b0381168114610a7a57600080fd5b919050565b60008060408385031215610a9257600080fd5b82359150610aa260208401610a63565b90509250929050565b6001600160a01b0391909116815260200190565b600080600060608486031215610ad457600080fd5b8335925060208401359150604084013560028110610af157600080fd5b809150509250925092565b600060208284031215610b0e57600080fd5b610b1782610a63565b9392505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610b4757610b47610b1e565b92915050565b60208082526013908201527243616d706169676e206e6f742061637469766560681b604082015260600190565b60408101610b888285610a1a565b8260208301529392505050565b600060018201610ba757610ba7610b1e565b5060010190565b80820180821115610b4757610b47610b1e565b8381526020810183905260608101610bdc6040830184610a06565b94935050505056fea2646970667358221220c964c4dd73269af61f5328e619546e6eb5e5acf3fe1c650e18bd46278d395c2f64736f6c63430008140033a2646970667358221220e25ab727a2cedcc91eefba5828b65d84a91e3dce3f0391d2e554fdce7c80eae364736f6c63430008140033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000765760003560e01c80633ff85905146200007b5780634cb98dc014620000b657806352856ef114620000cf57806380aaf88414620000e6578063cccc210b1462000116578063f5194ed4146200012d578063fcc72630146200013f575b600080fd5b620000a16200008c366004620003db565b60026020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b620000c062000156565b604051620000ad919062000400565b620000c0620000e0366004620003db565b620001ba565b620000fd620000f73660046200044f565b62000232565b6040516001600160a01b039091168152602001620000ad565b620000fd6200012736600462000469565b6200025d565b600054604051908152602001620000ad565b620000fd6200015036600462000540565b62000296565b60606000805480602002602001604051908101604052809291908181526020018280548015620001b057602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000191575b5050505050905090565b6001600160a01b0381166000908152600160209081526040918290208054835181840281018401909452808452606093928301828280156200022657602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831162000207575b50505050509050919050565b600081815481106200024357600080fd5b6000918252602090912001546001600160a01b0316905081565b600160205281600052604060002081815481106200027a57600080fd5b6000918252602090912001546001600160a01b03169150829050565b6000803386868686604051620002ac90620003b0565b620002bc95949392919062000621565b604051809103906000f080158015620002d9573d6000803e3d6000fd5b5060008054600181810183557f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e56390910180546001600160a01b0385166001600160a01b0319918216811790925533808552602084815260408087208054808801825590885282882001805490941685179093558386526002905293819020805460ff1916909317909255905192935083929091907f2d9ca7e782e7cae97e1c6281d9c2356407414ad4128da126fb128b8bbdc54cb3906200039e908b90899062000684565b60405180910390a39695505050505050565b61590680620006a983390190565b80356001600160a01b0381168114620003d657600080fd5b919050565b600060208284031215620003ee57600080fd5b620003f982620003be565b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015620004435783516001600160a01b0316835292840192918401916001016200041c565b50909695505050505050565b6000602082840312156200046257600080fd5b5035919050565b600080604083850312156200047d57600080fd5b6200048883620003be565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620004be57600080fd5b81356001600160401b0380821115620004db57620004db62000496565b604051601f8301601f19908116603f0116810190828211818310171562000506576200050662000496565b816040528381528660208588010111156200052057600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080608085870312156200055757600080fd5b84356001600160401b03808211156200056f57600080fd5b6200057d88838901620004ac565b955060208701359150808211156200059457600080fd5b620005a288838901620004ac565b94506040870135915080821115620005b957600080fd5b50620005c887828801620004ac565b949793965093946060013593505050565b6000815180845260005b818110156200060157602081850181015186830182015201620005e3565b506000602082860101526020601f19601f83011685010191505092915050565b6001600160a01b038616815260a0602082018190526000906200064790830187620005d9565b82810360408401526200065b8187620005d9565b90508281036060840152620006718186620005d9565b9150508260808301529695505050505050565b604081526000620006996040830185620005d9565b9050826020830152939250505056fe60806040523480156200001157600080fd5b506040516200590638038062005906833981016040819052620000349162000281565b6001600081905580546001600160a01b0319166001600160a01b0387161790556006620000628382620003cc565b508383828760405162000075906200018a565b620000849493929190620004c6565b604051809103906000f080158015620000a1573d6000803e3d6000fd5b50600280546001600160a01b0319166001600160a01b03929092169190911790556040518590620000d29062000198565b6001600160a01b039091168152602001604051809103906000f080158015620000ff573d6000803e3d6000fd5b50600380546001600160a01b0319166001600160a01b039290921691909117905560405185906200013090620001a6565b6001600160a01b039091168152602001604051809103906000f0801580156200015d573d6000803e3d6000fd5b50600480546001600160a01b0319166001600160a01b039290921691909117905550620005119350505050565b61179c806200182f83390190565b611c208062002fcb83390190565b610d1b8062004beb83390190565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620001e7578181015183820152602001620001cd565b50506000910152565b600082601f8301126200020257600080fd5b81516001600160401b03808211156200021f576200021f620001b4565b604051601f8301601f19908116603f011681019082821181831017156200024a576200024a620001b4565b816040528381528660208588010111156200026457600080fd5b62000277846020830160208901620001ca565b9695505050505050565b600080600080600060a086880312156200029a57600080fd5b85516001600160a01b0381168114620002b257600080fd5b60208701519095506001600160401b0380821115620002d057600080fd5b620002de89838a01620001f0565b95506040880151915080821115620002f557600080fd5b6200030389838a01620001f0565b945060608801519150808211156200031a57600080fd5b506200032988828901620001f0565b925050608086015190509295509295909350565b600181811c908216806200035257607f821691505b6020821081036200037357634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003c757600081815260208120601f850160051c81016020861015620003a25750805b601f850160051c820191505b81811015620003c357828155600101620003ae565b5050505b505050565b81516001600160401b03811115620003e857620003e8620001b4565b6200040081620003f984546200033d565b8462000379565b602080601f8311600181146200043857600084156200041f5750858301515b600019600386901b1c1916600185901b178555620003c3565b600085815260208120601f198616915b82811015620004695788860151825594840194600190910190840162000448565b5085821015620004885787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60008151808452620004b2816020860160208601620001ca565b601f01601f19169290920160200192915050565b608081526000620004db608083018762000498565b8281036020840152620004ef818762000498565b604084019590955250506001600160a01b039190911660609091015292915050565b61130e80620005216000396000f3fe6080604052600436106100c35760003560e01c806302d05d3f146100c85780630f90d900146100fe57806333b4097b1461012257806356885cd81461014f5780637284e4161461016f5780639534e63714610191578063985d0b1e146101b3578063a523b88a146101d3578063ac2f0074146101e8578063b384abef14610217578063cb56393c14610237578063cf19b7c41461024a578063e8d5b22d1461026a578063f3c2b7f714610297578063f7562765146102c4578063f8c860f4146102f1575b600080fd5b3480156100d457600080fd5b506001546100e8906001600160a01b031681565b6040516100f59190610d03565b60405180910390f35b34801561010a57600080fd5b5061011460055481565b6040519081526020016100f5565b34801561012e57600080fd5b5061014261013d366004610d17565b610311565b6040516100f59190610d30565b34801561015b57600080fd5b506004546100e8906001600160a01b031681565b34801561017b57600080fd5b506101846103c4565b6040516100f59190610dba565b34801561019d57600080fd5b506101b16101ac366004610d17565b610452565b005b3480156101bf57600080fd5b506002546100e8906001600160a01b031681565b3480156101df57600080fd5b506101b16104a0565b3480156101f457600080fd5b50610208610203366004610d17565b61059c565b6040516100f593929190610dd4565b34801561022357600080fd5b506101b1610232366004610dfe565b61064a565b6101b1610245366004610ed5565b61087f565b34801561025657600080fd5b506003546100e8906001600160a01b031681565b34801561027657600080fd5b50610114610285366004610f11565b60076020526000908152604090205481565b3480156102a357600080fd5b506101146102b2366004610f11565b60086020526000908152604090205481565b3480156102d057600080fd5b506102e46102df366004610d17565b610a02565b6040516100f59190610f3a565b3480156102fd57600080fd5b5061011461030c366004610f9c565b610af1565b6000818152600a602052604081206001810154606092906001600160401b0381111561033f5761033f610e20565b604051908082528060200260200182016040528015610368578160200160208202803683370190505b50905060005b60018301548110156103bc576000818152600284016020526040902054825183908390811061039f5761039f61108a565b6020908102919091010152806103b4816110b6565b91505061036e565b509392505050565b600680546103d1906110cf565b80601f01602080910402602001604051908101604052809291908181526020018280546103fd906110cf565b801561044a5780601f1061041f5761010080835404028352916020019161044a565b820191906000526020600020905b81548152906001019060200180831161042d57829003601f168201915b505050505081565b6001546001600160a01b031633146104855760405162461bcd60e51b815260040161047c90611109565b60405180910390fd5b6000908152600a60205260409020600501805460ff19169055565b60025460405163288c314960e21b81526001600160a01b039091169063a230c524906104d0903390600401610d03565b602060405180830381865afa1580156104ed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610511919061112e565b61052d5760405162461bcd60e51b815260040161047c90611150565b336000908152600760205260408120805491610548836110b6565b90915550506005805490600061055d836110b6565b909155505060055460405190815233907f3e0a236119aa7dbac5cfd31309977ad6f3c7f39721b4a28205e1386fef72499a9060200160405180910390a2565b600a602052600090815260409020805481906105b7906110cf565b80601f01602080910402602001604051908101604052809291908181526020018280546105e3906110cf565b80156106305780601f1061060557610100808354040283529160200191610630565b820191906000526020600020905b81548152906001019060200180831161061357829003601f168201915b50505050600483015460059093015491929160ff16905083565b60025460405163288c314960e21b81526001600160a01b039091169063a230c5249061067a903390600401610d03565b602060405180830381865afa158015610697573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bb919061112e565b6106d75760405162461bcd60e51b815260040161047c90611150565b6000828152600a60205260409020600581015460ff1661072b5760405162461bcd60e51b815260206004820152600f60248201526e506f6c6c206e6f742061637469766560881b604482015260640161047c565b8060040154421061076b5760405162461bcd60e51b815260206004820152600a602482015269141bdb1b08195b99195960b21b604482015260640161047c565b33600090815260038201602052604090205460ff16156107bd5760405162461bcd60e51b815260206004820152600d60248201526c105b1c9958591e481d9bdd1959609a1b604482015260640161047c565b600181015482106108015760405162461bcd60e51b815260206004820152600e60248201526d24b73b30b634b21037b83a34b7b760911b604482015260640161047c565b6000828152600282016020526040812080549161081d836110b6565b909155505033600081815260038301602052604090819020805460ff191660011790555184907f1abe610cf2bf87e57dcc1181fcf5ac0934e843d8344ab9eed6e86c799f62585e906108729086815260200190565b60405180910390a3505050565b60025460405163288c314960e21b81526001600160a01b039091169063a230c524906108af903390600401610d03565b602060405180830381865afa1580156108cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108f0919061112e565b61090c5760405162461bcd60e51b815260040161047c90611150565b610914610c1c565b600034116109545760405162461bcd60e51b815260206004820152600d60248201526c09aeae6e840e6cadcc8408aa89609b1b604482015260640161047c565b3360009081526008602052604081208054349290610973908490611176565b90915550506001546040516001600160a01b03909116903480156108fc02916000818181858888f193505050501580156109b1573d6000803e3d6000fd5b50336001600160a01b03167f4f629a5f1c8e7fc616770a8d34896b447f3457037c40a23347478746309d73c234836040516109ed92919061118f565b60405180910390a26109ff6001600055565b50565b6060600a6000838152602001908152602001600020600101805480602002602001604051908101604052809291908181526020016000905b82821015610ae6578382906000526020600020018054610a59906110cf565b80601f0160208091040260200160405190810160405280929190818152602001828054610a85906110cf565b8015610ad25780601f10610aa757610100808354040283529160200191610ad2565b820191906000526020600020905b815481529060010190602001808311610ab557829003601f168201915b505050505081526020019060010190610a3a565b505050509050919050565b6001546000906001600160a01b03163314610b1e5760405162461bcd60e51b815260040161047c90611109565b600283511015610b6a5760405162461bcd60e51b81526020600482015260176024820152764e656564206174206c656173742032206f7074696f6e7360481b604482015260640161047c565b6009805460009182610b7b836110b6565b909155506000818152600a6020526040902090915080610b9b87826111f7565b508451610bb19060018301906020880190610c46565b50610bbc8442611176565b600482015560058101805460ff19166001179055817fc3ad3dd4f77bea708d7c21b918efa79c536b30c5048924662db7a2bd96f4831687610bfd8742611176565b604051610c0b9291906112b6565b60405180910390a250949350505050565b600260005403610c3f57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b828054828255906000526020600020908101928215610c8c579160200282015b82811115610c8c5782518290610c7c90826111f7565b5091602001919060010190610c66565b50610c98929150610c9c565b5090565b80821115610c98576000610cb08282610cb9565b50600101610c9c565b508054610cc5906110cf565b6000825580601f10610cd5575050565b601f0160209004906000526020600020908101906109ff91905b80821115610c985760008155600101610cef565b6001600160a01b0391909116815260200190565b600060208284031215610d2957600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015610d6857835183529284019291840191600101610d4c565b50909695505050505050565b6000815180845260005b81811015610d9a57602081850181015186830182015201610d7e565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610dcd6020830184610d74565b9392505050565b606081526000610de76060830186610d74565b602083019490945250901515604090910152919050565b60008060408385031215610e1157600080fd5b50508035926020909101359150565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715610e5e57610e5e610e20565b604052919050565b600082601f830112610e7757600080fd5b81356001600160401b03811115610e9057610e90610e20565b610ea3601f8201601f1916602001610e36565b818152846020838601011115610eb857600080fd5b816020850160208301376000918101602001919091529392505050565b600060208284031215610ee757600080fd5b81356001600160401b03811115610efd57600080fd5b610f0984828501610e66565b949350505050565b600060208284031215610f2357600080fd5b81356001600160a01b0381168114610dcd57600080fd5b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610f8f57603f19888603018452610f7d858351610d74565b94509285019290850190600101610f61565b5092979650505050505050565b600080600060608486031215610fb157600080fd5b83356001600160401b0380821115610fc857600080fd5b610fd487838801610e66565b9450602091508186013581811115610feb57600080fd5b8601601f81018813610ffc57600080fd5b80358281111561100e5761100e610e20565b8060051b61101d858201610e36565b918252828101850191858101908b84111561103757600080fd5b86850192505b83831015611073578235868111156110555760008081fd5b6110638d8983890101610e66565b835250918601919086019061103d565b989b989a5050505060409690960135955050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016110c8576110c86110a0565b5060010190565b600181811c908216806110e357607f821691505b60208210810361110357634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600b908201526a2737ba1031b932b0ba37b960a91b604082015260600190565b60006020828403121561114057600080fd5b81518015158114610dcd57600080fd5b6020808252600c908201526b2737ba10309036b2b6b132b960a11b604082015260600190565b80820180821115611189576111896110a0565b92915050565b828152604060208201526000610f096040830184610d74565b601f8211156111f257600081815260208120601f850160051c810160208610156111cf5750805b601f850160051c820191505b818110156111ee578281556001016111db565b5050505b505050565b81516001600160401b0381111561121057611210610e20565b6112248161121e84546110cf565b846111a8565b602080601f83116001811461125957600084156112415750858301515b600019600386901b1c1916600185901b1785556111ee565b600085815260208120601f198616915b8281101561128857888601518255948401946001909101908401611269565b50858210156112a65787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6040815260006112c96040830185610d74565b9050826020830152939250505056fea2646970667358221220bb6fd042d6545bdda96b616137810937da03be19525be53ade1e42d70939377e64736f6c6343000814003360806040523480156200001157600080fd5b506040516200179c3803806200179c8339810160408190526200003491620001b6565b8084846000620000458382620002da565b506001620000548282620002da565b5050506001600160a01b0381166200008657604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b62000091816200009f565b505060085550620003a69050565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200011957600080fd5b81516001600160401b0380821115620001365762000136620000f1565b604051601f8301601f19908116603f01168101908282118183101715620001615762000161620000f1565b816040528381526020925086838588010111156200017e57600080fd5b600091505b83821015620001a2578582018301518183018401529082019062000183565b600093810190920192909252949350505050565b60008060008060808587031215620001cd57600080fd5b84516001600160401b0380821115620001e557600080fd5b620001f38883890162000107565b955060208701519150808211156200020a57600080fd5b50620002198782880162000107565b60408701516060880151919550935090506001600160a01b03811681146200024057600080fd5b939692955090935050565b600181811c908216806200026057607f821691505b6020821081036200028157634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002d557600081815260208120601f850160051c81016020861015620002b05750805b601f850160051c820191505b81811015620002d157828155600101620002bc565b5050505b505050565b81516001600160401b03811115620002f657620002f6620000f1565b6200030e816200030784546200024b565b8462000287565b602080601f8311600181146200034657600084156200032d5750858301515b600019600386901b1c1916600185901b178555620002d1565b600085815260208120601f198616915b82811015620003775788860151825594840194600190910190840162000356565b5085821015620003965787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6113e680620003b66000396000f3fe6080604052600436106101055760003560e01c806301ffc9a71461010a57806306fdde031461013f578063081812fc14610161578063095ea7b31461018e5780630de3226b146101b057806323b872dd146101d45780633ccfd60b146101f457806342842e0e146102095780636352211e1461022957806369d5f38a1461024957806370a08231146102695780637123190814610289578063715018a61461029157806376e92559146102a65780638da5cb5b146102bc57806395d89b41146102d1578063a22cb465146102e6578063a230c52414610306578063b88d4fde14610326578063c87b56dd14610346578063e985e9c514610366578063f2fde38b14610386575b600080fd5b34801561011657600080fd5b5061012a610125366004611001565b6103a6565b60405190151581526020015b60405180910390f35b34801561014b57600080fd5b506101546103f8565b604051610136919061106e565b34801561016d57600080fd5b5061018161017c366004611081565b61048a565b604051610136919061109a565b34801561019a57600080fd5b506101ae6101a93660046110ca565b61049f565b005b3480156101bc57600080fd5b506101c660085481565b604051908152602001610136565b3480156101e057600080fd5b506101ae6101ef3660046110f4565b6104ae565b34801561020057600080fd5b506101ae610542565b34801561021557600080fd5b506101ae6102243660046110f4565b61058d565b34801561023557600080fd5b50610181610244366004611081565b6105ad565b34801561025557600080fd5b506101ae610264366004611081565b6105b8565b34801561027557600080fd5b506101c6610284366004611130565b6105fb565b6101ae610643565b34801561029d57600080fd5b506101ae610741565b3480156102b257600080fd5b506101c660095481565b3480156102c857600080fd5b50610181610755565b3480156102dd57600080fd5b50610154610764565b3480156102f257600080fd5b506101ae61030136600461114b565b610773565b34801561031257600080fd5b5061012a610321366004611130565b61077e565b34801561033257600080fd5b506101ae61034136600461119d565b610791565b34801561035257600080fd5b50610154610361366004611081565b6107a8565b34801561037257600080fd5b5061012a610381366004611278565b61081d565b34801561039257600080fd5b506101ae6103a1366004611130565b61084b565b60006001600160e01b031982166380ac58cd60e01b14806103d757506001600160e01b03198216635b5e139f60e01b145b806103f257506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060008054610407906112ab565b80601f0160208091040260200160405190810160405280929190818152602001828054610433906112ab565b80156104805780601f1061045557610100808354040283529160200191610480565b820191906000526020600020905b81548152906001019060200180831161046357829003601f168201915b5050505050905090565b600061049582610886565b506103f2826108be565b6104aa8282336108d9565b5050565b6001600160a01b0382166104e1576000604051633250574960e11b81526004016104d8919061109a565b60405180910390fd5b60006104ee8383336108e6565b9050836001600160a01b0316816001600160a01b03161461053c576040516364283d7b60e01b81526001600160a01b03808616600483015260248201849052821660448201526064016104d8565b50505050565b61054a6109da565b610552610755565b6001600160a01b03166108fc479081150290604051600060405180830381858888f1935050505015801561058a573d6000803e3d6000fd5b50565b6105a883838360405180602001604052806000815250610791565b505050565b60006103f282610886565b6105c06109da565b60088190556040518181527f66cbca4f3c64fecf1dcb9ce094abcf7f68c3450a1d4e3a8e917dd621edb4ebe09060200160405180910390a150565b60006001600160a01b0382166106275760006040516322718ad960e21b81526004016104d8919061109a565b506001600160a01b031660009081526003602052604090205490565b60085434101561068c5760405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b60448201526064016104d8565b600780546000918261069d836112fb565b9190505590506106ad3382610a0c565b600980549060006106bd836112fb565b91905055506008543411156107095760085433906108fc906106df9034611314565b6040518115909202916000818181858888f19350505050158015610707573d6000803e3d6000fd5b505b60405181815233907fbab4562ae868d1765ed8452e98bba908a974596c4babc3ada5e90e05e3f433fb9060200160405180910390a250565b6107496109da565b6107536000610a26565b565b6006546001600160a01b031690565b606060018054610407906112ab565b6104aa338383610a78565b60008061078a836105fb565b1192915050565b61079c8484846104ae565b61053c84848484610b0e565b60606107b382610886565b5060006107cb60408051602081019091526000815290565b905060008151116107eb5760405180602001604052806000815250610816565b806107f584610c25565b604051602001610806929190611327565b6040516020818303038152906040525b9392505050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b6108536109da565b6001600160a01b03811661087d576000604051631e4fbdf760e01b81526004016104d8919061109a565b61058a81610a26565b60008061089283610cb7565b90506001600160a01b0381166103f257604051637e27328960e01b8152600481018490526024016104d8565b6000908152600460205260409020546001600160a01b031690565b6105a88383836001610cd2565b6000806108f284610cb7565b90506001600160a01b0383161561090e5761090e818486610dcf565b6001600160a01b0381161561094c5761092b600085600080610cd2565b6001600160a01b038116600090815260036020526040902080546000190190555b6001600160a01b0385161561097b576001600160a01b0385166000908152600360205260409020805460010190555b60008481526002602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b336109e3610755565b6001600160a01b031614610753573360405163118cdaa760e01b81526004016104d8919061109a565b6104aa828260405180602001604052806000815250610e33565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216610aa15781604051630b61174360e31b81526004016104d8919061109a565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0383163b1561053c57604051630a85bd0160e11b81526001600160a01b0384169063150b7a0290610b50903390889087908790600401611356565b6020604051808303816000875af1925050508015610b8b575060408051601f3d908101601f19168201909252610b8891810190611393565b60015b610beb573d808015610bb9576040519150601f19603f3d011682016040523d82523d6000602084013e610bbe565b606091505b508051600003610be35783604051633250574960e11b81526004016104d8919061109a565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b14610c1e5783604051633250574960e11b81526004016104d8919061109a565b5050505050565b60606000610c3283610e4a565b60010190506000816001600160401b03811115610c5157610c51611187565b6040519080825280601f01601f191660200182016040528015610c7b576020820181803683370190505b5090508181016020015b600019016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a8504945084610c8557509392505050565b6000908152600260205260409020546001600160a01b031690565b8080610ce657506001600160a01b03821615155b15610d9f576000610cf684610886565b90506001600160a01b03831615801590610d225750826001600160a01b0316816001600160a01b031614155b8015610d355750610d33818461081d565b155b15610d55578260405163a9fbf51f60e01b81526004016104d8919061109a565b8115610d9d5783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260046020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b610dda838383610f20565b6105a8576001600160a01b038316610e0857604051637e27328960e01b8152600481018290526024016104d8565b60405163177e802f60e01b81526001600160a01b0383166004820152602481018290526044016104d8565b610e3d8383610f86565b6105a86000848484610b0e565b60008072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b8310610e895772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6904ee2d6d415b85acef8160201b8310610eb3576904ee2d6d415b85acef8160201b830492506020015b662386f26fc100008310610ed157662386f26fc10000830492506010015b6305f5e1008310610ee9576305f5e100830492506008015b6127108310610efd57612710830492506004015b60648310610f0f576064830492506002015b600a83106103f25760010192915050565b60006001600160a01b03831615801590610f7e5750826001600160a01b0316846001600160a01b03161480610f5a5750610f5a848461081d565b80610f7e5750826001600160a01b0316610f73836108be565b6001600160a01b0316145b949350505050565b6001600160a01b038216610fb0576000604051633250574960e11b81526004016104d8919061109a565b6000610fbe838360006108e6565b90506001600160a01b038116156105a85760006040516339e3563760e11b81526004016104d8919061109a565b6001600160e01b03198116811461058a57600080fd5b60006020828403121561101357600080fd5b813561081681610feb565b60005b83811015611039578181015183820152602001611021565b50506000910152565b6000815180845261105a81602086016020860161101e565b601f01601f19169290920160200192915050565b6020815260006108166020830184611042565b60006020828403121561109357600080fd5b5035919050565b6001600160a01b0391909116815260200190565b80356001600160a01b03811681146110c557600080fd5b919050565b600080604083850312156110dd57600080fd5b6110e6836110ae565b946020939093013593505050565b60008060006060848603121561110957600080fd5b611112846110ae565b9250611120602085016110ae565b9150604084013590509250925092565b60006020828403121561114257600080fd5b610816826110ae565b6000806040838503121561115e57600080fd5b611167836110ae565b91506020830135801515811461117c57600080fd5b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600080600080608085870312156111b357600080fd5b6111bc856110ae565b93506111ca602086016110ae565b92506040850135915060608501356001600160401b03808211156111ed57600080fd5b818701915087601f83011261120157600080fd5b81358181111561121357611213611187565b604051601f8201601f19908116603f0116810190838211818310171561123b5761123b611187565b816040528281528a602084870101111561125457600080fd5b82602086016020830137600060208483010152809550505050505092959194509250565b6000806040838503121561128b57600080fd5b611294836110ae565b91506112a2602084016110ae565b90509250929050565b600181811c908216806112bf57607f821691505b6020821081036112df57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b60006001820161130d5761130d6112e5565b5060010190565b818103818111156103f2576103f26112e5565b6000835161133981846020880161101e565b83519083019061134d81836020880161101e565b01949350505050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061138990830184611042565b9695505050505050565b6000602082840312156113a557600080fd5b815161081681610feb56fea2646970667358221220e56b250bf5ff76f83ab6b1880bf9a9e1ac0f5a4b92a27807daa93d2fe08d755264736f6c6343000814003360806040523480156200001157600080fd5b5060405162001c2038038062001c208339810160408190526200003491620000f7565b6040805160208101909152600081528190620000508162000093565b506001600160a01b0381166200008057604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200008b81620000a5565b50506200029a565b6002620000a18282620001ce565b5050565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6000602082840312156200010a57600080fd5b81516001600160a01b03811681146200012257600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b600181811c908216806200015457607f821691505b6020821081036200017557634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620001c957600081815260208120601f850160051c81016020861015620001a45750805b601f850160051c820191505b81811015620001c557828155600101620001b0565b5050505b505050565b81516001600160401b03811115620001ea57620001ea62000129565b6200020281620001fb84546200013f565b846200017b565b602080601f8311600181146200023a5760008415620002215750858301515b600019600386901b1c1916600185901b178555620001c5565b600085815260208120601f198616915b828110156200026b578886015182559484019460019091019084016200024a565b50858210156200028a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61197680620002aa6000396000f3fe6080604052600436106100c25760003560e01c8062fdd58e146100c757806301ffc9a7146100fa5780630e73afdf1461012a5780630e89341c1461015a5780632eb2c2d6146101875780633ccfd60b146101a95780634e1273f4146101be578063553cd765146101eb578063715018a6146101fe57806374449ca4146102135780638da5cb5b1461022857806390cd58191461024a578063a22cb4651461026a578063e985e9c51461028a578063f242432a146102aa578063f2fde38b146102ca575b600080fd5b3480156100d357600080fd5b506100e76100e23660046110c6565b6102ea565b6040519081526020015b60405180910390f35b34801561010657600080fd5b5061011a610115366004611106565b610312565b60405190151581526020016100f1565b34801561013657600080fd5b5061014a61014536600461112a565b610362565b6040516100f19493929190611189565b34801561016657600080fd5b5061017a61017536600461112a565b610415565b6040516100f191906111b8565b34801561019357600080fd5b506101a76101a2366004611316565b6104ba565b005b3480156101b557600080fd5b506101a761051b565b3480156101ca57600080fd5b506101de6101d93660046113bf565b610566565b6040516100f191906114b9565b6101a76101f93660046114cc565b610636565b34801561020a57600080fd5b506101a7610807565b34801561021f57600080fd5b506004546100e7565b34801561023457600080fd5b5061023d61081b565b6040516100f191906114ee565b34801561025657600080fd5b506100e7610265366004611502565b61082a565b34801561027657600080fd5b506101a7610285366004611565565b6108e6565b34801561029657600080fd5b5061011a6102a53660046115a1565b6108f5565b3480156102b657600080fd5b506101a76102c53660046115d4565b610923565b3480156102d657600080fd5b506101a76102e5366004611638565b610973565b6000818152602081815260408083206001600160a01b03861684529091529020545b92915050565b60006001600160e01b03198216636cdb3d1360e11b148061034357506001600160e01b031982166303a24d0760e21b145b8061030c57506301ffc9a760e01b6001600160e01b031983161461030c565b60056020526000908152604090208054600182015460028301546003840180549394929391929161039290611653565b80601f01602080910402602001604051908101604052809291908181526020018280546103be90611653565b801561040b5780601f106103e05761010080835404028352916020019161040b565b820191906000526020600020905b8154815290600101906020018083116103ee57829003601f168201915b5050505050905084565b600081815260056020526040902060030180546060919061043590611653565b80601f016020809104026020016040519081016040528092919081815260200182805461046190611653565b80156104ae5780601f10610483576101008083540402835291602001916104ae565b820191906000526020600020905b81548152906001019060200180831161049157829003601f168201915b50505050509050919050565b336001600160a01b03861681148015906104db57506104d986826108f5565b155b1561050657808660405163711bec9160e11b81526004016104fd92919061168d565b60405180910390fd5b61051386868686866109ae565b505050505050565b610523610a15565b61052b61081b565b6001600160a01b03166108fc479081150290604051600060405180830381858888f19350505050158015610563573d6000803e3d6000fd5b50565b606081518351146105975781518351604051635b05999160e01b8152600481019290925260248201526044016104fd565b600083516001600160401b038111156105b2576105b26111cb565b6040519080825280602002602001820160405280156105db578160200160208202803683370190505b50905060005b845181101561062e576106016105f78683610a47565b6100e28684610a47565b828281518110610613576106136116a7565b6020908102919091010152610627816116d3565b90506105e1565b509392505050565b6000828152600560205260409020600181015461068e5760405162461bcd60e51b815260206004820152601660248201527510dbdb9d195b9d08191bd95cc81b9bdd08195e1a5cdd60521b60448201526064016104fd565b80600101548282600201546106a391906116ec565b11156106e65760405162461bcd60e51b815260206004820152601260248201527145786365656473206d617820737570706c7960701b60448201526064016104fd565b80546106f39083906116ff565b3410156107395760405162461bcd60e51b8152602060048201526014602482015273125b9cdd59999a58da595b9d081c185e5b595b9d60621b60448201526064016104fd565b8181600201600082825461074d91906116ec565b9250508190555061076f33848460405180602001604052806000815250610a55565b805461077c9083906116ff565b3411156107ca57805433906108fc906107969085906116ff565b6107a09034611716565b6040518115909202916000818181858888f193505050501580156107c8573d6000803e3d6000fd5b505b604051828152339084907fc48688bb4f81faa9a189102a2f3a2ff9e3c217037cc67b6a2829672176940242906020015b60405180910390a3505050565b61080f610a15565b6108196000610a9e565b565b6003546001600160a01b031690565b6000610834610a15565b6004805460009182610845836116d3565b909155506040805160808101825287815260208082018881526000838501818152606085018a815287835260059094529490208351815590516001820155925160028401555192935091600382019061089e9082611774565b50905050807f5babc075e07d10206474b5fc21410d62a99e15b4c45f33656671be31fcc898368686866040516108d693929190611833565b60405180910390a2949350505050565b6108f1338383610af0565b5050565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b336001600160a01b0386168114801590610944575061094286826108f5565b155b1561096657808660405163711bec9160e11b81526004016104fd92919061168d565b6105138686868686610b7e565b61097b610a15565b6001600160a01b0381166109a5576000604051631e4fbdf760e01b81526004016104fd91906114ee565b61056381610a9e565b6001600160a01b0384166109d8576000604051632bfa23e760e11b81526004016104fd91906114ee565b6001600160a01b038516610a01576000604051626a0d4560e21b81526004016104fd91906114ee565b610a0e8585858585610bf8565b5050505050565b33610a1e61081b565b6001600160a01b031614610819573360405163118cdaa760e01b81526004016104fd91906114ee565b602090810291909101015190565b6001600160a01b038416610a7f576000604051632bfa23e760e11b81526004016104fd91906114ee565b600080610a8c8585610c5d565b91509150610513600087848487610bf8565b600380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6001600160a01b038216610b1957600060405162ced3e160e81b81526004016104fd91906114ee565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3191016107fa565b6001600160a01b038416610ba8576000604051632bfa23e760e11b81526004016104fd91906114ee565b6001600160a01b038516610bd1576000604051626a0d4560e21b81526004016104fd91906114ee565b600080610bde8585610c5d565b91509150610bef8787848487610bf8565b50505050505050565b610c0485858585610c85565b6001600160a01b03841615610a0e5782513390600103610c4f576000610c2a8582610a47565b90506000610c388582610a47565b9050610c48838989858589610eb8565b5050610513565b610513818787878787610fca565b6040805160018082526020820194909452808201938452606081019290925260808201905291565b8051825114610cb45781518151604051635b05999160e01b8152600481019290925260248201526044016104fd565b3360005b8351811015610dcd576000610ccd8583610a47565b90506000610cdb8584610a47565b90506001600160a01b03881615610d75576000828152602081815260408083206001600160a01b038c16845290915290205481811015610d4e576040516303dee4c560e01b81526001600160a01b038a1660048201526024810182905260448101839052606481018490526084016104fd565b6000838152602081815260408083206001600160a01b038d16845290915290209082900390555b6001600160a01b03871615610dba576000828152602081815260408083206001600160a01b038b16845290915281208054839290610db49084906116ec565b90915550505b505080610dc6906116d3565b9050610cb8565b508251600103610e5a576000610de38482610a47565b90506000610df18482610a47565b9050856001600160a01b0316876001600160a01b0316846001600160a01b03167fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f628585604051610e4b929190918252602082015260400190565b60405180910390a45050610a0e565b836001600160a01b0316856001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051610ea992919061185b565b60405180910390a45050505050565b6001600160a01b0384163b156105135760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e6190610efc9089908990889088908890600401611880565b6020604051808303816000875af1925050508015610f37575060408051601f3d908101601f19168201909252610f34918101906118c5565b60015b610f97573d808015610f65576040519150601f19603f3d011682016040523d82523d6000602084013e610f6a565b606091505b508051600003610f8f5784604051632bfa23e760e11b81526004016104fd91906114ee565b805181602001fd5b6001600160e01b0319811663f23a6e6160e01b14610bef5784604051632bfa23e760e11b81526004016104fd91906114ee565b6001600160a01b0384163b156105135760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061100e90899089908890889088906004016118e2565b6020604051808303816000875af1925050508015611049575060408051601f3d908101601f19168201909252611046918101906118c5565b60015b611077573d808015610f65576040519150601f19603f3d011682016040523d82523d6000602084013e610f6a565b6001600160e01b0319811663bc197c8160e01b14610bef5784604051632bfa23e760e11b81526004016104fd91906114ee565b80356001600160a01b03811681146110c157600080fd5b919050565b600080604083850312156110d957600080fd5b6110e2836110aa565b946020939093013593505050565b6001600160e01b03198116811461056357600080fd5b60006020828403121561111857600080fd5b8135611123816110f0565b9392505050565b60006020828403121561113c57600080fd5b5035919050565b6000815180845260005b818110156111695760208185018101518683018201520161114d565b506000602082860101526020601f19601f83011685010191505092915050565b8481528360208201528260408201526080606082015260006111ae6080830184611143565b9695505050505050565b6020815260006111236020830184611143565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715611209576112096111cb565b604052919050565b60006001600160401b0382111561122a5761122a6111cb565b5060051b60200190565b600082601f83011261124557600080fd5b8135602061125a61125583611211565b6111e1565b82815260059290921b8401810191818101908684111561127957600080fd5b8286015b84811015611294578035835291830191830161127d565b509695505050505050565b60006001600160401b038311156112b8576112b86111cb565b6112cb601f8401601f19166020016111e1565b90508281528383830111156112df57600080fd5b828260208301376000602084830101529392505050565b600082601f83011261130757600080fd5b6111238383356020850161129f565b600080600080600060a0868803121561132e57600080fd5b611337866110aa565b9450611345602087016110aa565b935060408601356001600160401b038082111561136157600080fd5b61136d89838a01611234565b9450606088013591508082111561138357600080fd5b61138f89838a01611234565b935060808801359150808211156113a557600080fd5b506113b2888289016112f6565b9150509295509295909350565b600080604083850312156113d257600080fd5b82356001600160401b03808211156113e957600080fd5b818501915085601f8301126113fd57600080fd5b8135602061140d61125583611211565b82815260059290921b8401810191818101908984111561142c57600080fd5b948201945b8386101561145157611442866110aa565b82529482019490820190611431565b9650508601359250508082111561146757600080fd5b5061147485828601611234565b9150509250929050565b600081518084526020808501945080840160005b838110156114ae57815187529582019590820190600101611492565b509495945050505050565b602081526000611123602083018461147e565b600080604083850312156114df57600080fd5b50508035926020909101359150565b6001600160a01b0391909116815260200190565b60008060006060848603121561151757600080fd5b833592506020840135915060408401356001600160401b0381111561153b57600080fd5b8401601f8101861361154c57600080fd5b61155b8682356020840161129f565b9150509250925092565b6000806040838503121561157857600080fd5b611581836110aa565b91506020830135801515811461159657600080fd5b809150509250929050565b600080604083850312156115b457600080fd5b6115bd836110aa565b91506115cb602084016110aa565b90509250929050565b600080600080600060a086880312156115ec57600080fd5b6115f5866110aa565b9450611603602087016110aa565b9350604086013592506060860135915060808601356001600160401b0381111561162c57600080fd5b6113b2888289016112f6565b60006020828403121561164a57600080fd5b611123826110aa565b600181811c9082168061166757607f821691505b60208210810361168757634e487b7160e01b600052602260045260246000fd5b50919050565b6001600160a01b0392831681529116602082015260400190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016116e5576116e56116bd565b5060010190565b8082018082111561030c5761030c6116bd565b808202811582820484141761030c5761030c6116bd565b8181038181111561030c5761030c6116bd565b601f82111561176f57600081815260208120601f850160051c810160208610156117505750805b601f850160051c820191505b818110156105135782815560010161175c565b505050565b81516001600160401b0381111561178d5761178d6111cb565b6117a18161179b8454611653565b84611729565b602080601f8311600181146117d657600084156117be5750858301515b600019600386901b1c1916600185901b178555610513565b600085815260208120601f198616915b82811015611805578886015182559484019460019091019084016117e6565b50858210156118235787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b8381528260208201526060604082015260006118526060830184611143565b95945050505050565b60408152600061186e604083018561147e565b8281036020840152611852818561147e565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906118ba90830184611143565b979650505050505050565b6000602082840312156118d757600080fd5b8151611123816110f0565b6001600160a01b0386811682528516602082015260a06040820181905260009061190e9083018661147e565b8281036060840152611920818661147e565b905082810360808401526119348185611143565b9897505050505050505056fea2646970667358221220983a33c459d53c49ab0362a8078d79d97ec1f9a008881f5fd016db471dd7f23d64736f6c63430008140033608060405234801561001057600080fd5b50604051610d1b380380610d1b83398101604081905261002f916100c2565b806001600160a01b03811661005e57604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b61006781610072565b5050600180556100f2565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156100d457600080fd5b81516001600160a01b03811681146100eb57600080fd5b9392505050565b610c1a806101016000396000f3fe6080604052600436106100815760003560e01c8063141961bc14610086578063155dd5ee146100f0578063278ecde1146101125780633d891f59146101325780636b5ca27d14610178578063715018a6146101985780638da5cb5b146101ad578063a31ec2d4146101cf578063c1cbbca7146101ef578063f2fde38b14610202575b600080fd5b34801561009257600080fd5b506100d66100a13660046109d7565b600360208190526000918252604090912080546001820154600283015492909301549092919060ff8082169161010090041685565b6040516100e7959493929190610a2a565b60405180910390f35b3480156100fc57600080fd5b5061011061010b3660046109d7565b610222565b005b34801561011e57600080fd5b5061011061012d3660046109d7565b610351565b34801561013e57600080fd5b5061016a61014d366004610a7f565b600460209081526000928352604080842090915290825290205481565b6040519081526020016100e7565b34801561018457600080fd5b506101106101933660046109d7565b6104d4565b3480156101a457600080fd5b50610110610635565b3480156101b957600080fd5b506101c2610649565b6040516100e79190610aab565b3480156101db57600080fd5b5061016a6101ea366004610abf565b610658565b6101106101fd3660046109d7565b610792565b34801561020e57600080fd5b5061011061021d366004610afc565b6108f0565b61022a61092b565b61023261095d565b60008181526003602052604090206001600382810154610100900460ff1690811115610260576102606109f0565b146102ac5760405162461bcd60e51b815260206004820152601760248201527610d85b5c185a59db881b9bdd081cdd58d8d95cdcd99d5b604a1b60448201526064015b60405180910390fd5b600281018054600090915560038201805461ff0019166103001790556102d0610649565b6001600160a01b03166108fc829081150290604051600060405180830381858888f19350505050158015610308573d6000803e3d6000fd5b50827fd66662c0ded9e58fd31d5e44944bcfd07ffc15e6927ecc1382e7941cb7bd24c48260405161033b91815260200190565b60405180910390a2505061034e60018055565b50565b61035961095d565b60008181526003602052604090206002600382810154610100900460ff1690811115610387576103876109f0565b146103cc5760405162461bcd60e51b8152602060048201526015602482015274526566756e6473206e6f7420617661696c61626c6560581b60448201526064016102a3565b60008281526004602090815260408083203384529091529020548061042f5760405162461bcd60e51b8152602060048201526019602482015278139bc818dbdb9d1c9a589d5d1a5bdb881d1bc81c99599d5b99603a1b60448201526064016102a3565b6000838152600460209081526040808320338452909152812081905560028301805483929061045f908490610b34565b9091555050604051339082156108fc029083906000818181858888f19350505050158015610491573d6000803e3d6000fd5b50604051818152339084907f7ca5472b7ea78c2c0141c5a12ee6d170cf4ce8ed06be3d22c8252ddfc7a6a2c49060200160405180910390a3505061034e60018055565b600081815260036020526040812090600382810154610100900460ff1690811115610501576105016109f0565b1461051e5760405162461bcd60e51b81526004016102a390610b4d565b806001015442101561056b5760405162461bcd60e51b815260206004820152601660248201527543616d706169676e207374696c6c206f6e676f696e6760501b60448201526064016102a3565b805460028201541061058d5760038101805461ff0019166101001790556105e2565b6000600382015460ff1660018111156105a8576105a86109f0565b146105b45760016105b7565b60025b8160030160016101000a81548160ff021916908360038111156105dc576105dc6109f0565b02179055505b817f242b7d43c73f615dfdfa4919702ad9db4880a3b095d19100eb73c3d05e92be158260030160019054906101000a900460ff168360020154604051610629929190610b7a565b60405180910390a25050565b61063d61092b565b6106476000610987565b565b6000546001600160a01b031690565b600061066261092b565b600280546000918261067383610b95565b9190505590506040518060a0016040528086815260200185426106969190610bae565b8152602001600081526020018460018111156106b4576106b46109f0565b8152602001600090526000828152600360208181526040928390208451815590840151600180830191909155928401516002820155606084015191810180549193909160ff191690838181111561070d5761070d6109f0565b021790555060808201518160030160016101000a81548160ff0219169083600381111561073c5761073c6109f0565b02179055508291507f773f71a4c22bd4be60ea1217b6a12317409936f776458fb130c6bdd9984741f29050866107728742610bae565b8660405161078293929190610bc1565b60405180910390a2949350505050565b600081815260036020526040812090600382810154610100900460ff16908111156107bf576107bf6109f0565b146107dc5760405162461bcd60e51b81526004016102a390610b4d565b806001015442106108205760405162461bcd60e51b815260206004820152600e60248201526d10d85b5c185a59db88195b99195960921b60448201526064016102a3565b6000341161086c5760405162461bcd60e51b81526020600482015260196024820152784d75737420636f6e7472696275746520736f6d657468696e6760381b60448201526064016102a3565b600082815260046020908152604080832033845290915281208054349290610895908490610bae565b92505081905550348160020160008282546108b09190610bae565b9091555050604051348152339083907f0a4a91237423e0a1766a761c7cb029311d8b95d6b1b81db1b949a70c98b4e08e9060200160405180910390a35050565b6108f861092b565b6001600160a01b038116610922576000604051631e4fbdf760e01b81526004016102a39190610aab565b61034e81610987565b33610934610649565b6001600160a01b031614610647573360405163118cdaa760e01b81526004016102a39190610aab565b60026001540361098057604051633ee5aeb560e01b815260040160405180910390fd5b6002600155565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156109e957600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b60028110610a1657610a166109f0565b9052565b60048110610a1657610a166109f0565b858152602081018590526040810184905260a08101610a4c6060830185610a06565b610a596080830184610a1a565b9695505050505050565b80356001600160a01b0381168114610a7a57600080fd5b919050565b60008060408385031215610a9257600080fd5b82359150610aa260208401610a63565b90509250929050565b6001600160a01b0391909116815260200190565b600080600060608486031215610ad457600080fd5b8335925060208401359150604084013560028110610af157600080fd5b809150509250925092565b600060208284031215610b0e57600080fd5b610b1782610a63565b9392505050565b634e487b7160e01b600052601160045260246000fd5b81810381811115610b4757610b47610b1e565b92915050565b60208082526013908201527243616d706169676e206e6f742061637469766560681b604082015260600190565b60408101610b888285610a1a565b8260208301529392505050565b600060018201610ba757610ba7610b1e565b5060010190565b80820180821115610b4757610b47610b1e565b8381526020810183905260608101610bdc6040830184610a06565b94935050505056fea2646970667358221220c964c4dd73269af61f5328e619546e6eb5e5acf3fe1c650e18bd46278d395c2f64736f6c63430008140033a2646970667358221220e25ab727a2cedcc91eefba5828b65d84a91e3dce3f0391d2e554fdce7c80eae364736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4536,
        "contract": "contracts/CreatorPlatform.sol:CreatorPlatform",
        "label": "allCreatorSpaces",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 4541,
        "contract": "contracts/CreatorPlatform.sol:CreatorPlatform",
        "label": "creatorToSpaces",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 4545,
        "contract": "contracts/CreatorPlatform.sol:CreatorPlatform",
        "label": "isCreatorSpace",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}